#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
		
	Если Метаданные.ОбщиеМодули.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ОМ_ДополнительныеОтчетыИОбработки 				= Вычислить("ДополнительныеОтчетыИОбработки");
	ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер 	= Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");
	
	ПараметрыРегистрации = ОМ_ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид 				= ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия 			= "1.2.7";	
	ПараметрыРегистрации.Наименование 		= "bm Навигатор";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "bm Навигатор";
	НоваяКоманда.Идентификатор = "bm_Навигатор";
	НоваяКоманда.Использование = ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонфигурацией

Функция ЭтоСсылка(Тип) Экспорт
	
	Результат = Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или Документы.ТипВсеСсылки().СодержитТип(Тип)	
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОбъектаМетаданных(Знач ОписаниеСсылка, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеСсылка) = Тип("Структура") Тогда
		Описание = ОписаниеСсылка;	
	ИначеЕсли ТипЗнч(ОписаниеСсылка) = Тип("Тип") Тогда
		Описание = ИнформацияОТипеМетаданныхПоСсылке(Новый(ОписаниеСсылка));
	Иначе
		Описание = ИнформацияОТипеМетаданныхПоСсылке(ОписаниеСсылка);
	КонецЕсли;
		
	Результат = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним");
	ЗаполнитьЗначенияСвойств(Результат, Описание);
	
	Если СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных") Тогда
		ОМ = Вычислить("Метаданные." + Описание.ИмяМнч + "." + Описание.Имя);
	Иначе
		ОМ = Метаданные[Описание.ИмяМнч][Описание.Имя];
	КонецЕсли;
	
	Результат.Вставить("Реквизиты", Новый Структура("Имена,ГруппыРеквизитовМассив,ГруппыРеквизитовСтруктура", Новый Массив(), Новый Структура(), Новый Структура()));
	Результат.Вставить("ТЧ", Новый Структура("Имена,ГруппыРеквизитовМассив,ГруппыРеквизитовСтруктура", Новый Массив(), Новый Структура(), Новый Структура()));
	Результат.Вставить("СтдРекНЗ");
	
	Результат.Вставить("ЭтоРегистрСведений", СтрНачинаетсяС(Описание.ИмяЕдч, "РегистрСведений"));
	Результат.Вставить("ЭтоВнешИсточник", СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных"));
	Результат.Вставить("ЕстьДвижения", (Описание.ИмяЕдч = "Документ" И Метаданные.Документы[Описание.Имя].Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить));
	
	ОсновнаяТаблица = Результат.ИмяЕдч + "." + Результат.Имя;
	Если Результат.ИмяЕдч = "РегистрБухгалтерии" Тогда
		ОсновнаяТаблица = ОсновнаяТаблица + ".ДвиженияССубконто";
	КонецЕсли;
	Если Описание.ИмяЕдч = "ВнешнийИсточникДанныхТаблица" Тогда
		ОсновнаяТаблица = "ВнешнийИсточникДанных." + Описание.ИмяВнешИсточника + ".Таблица." + Описание.Имя;
	КонецЕсли;
	Результат.Вставить("ОсновнаяТаблица", ОсновнаяТаблица);
	
	Если Описание.ИмяЕдч = "Константа" Тогда
		ЗаполнитьРеквизитыОМ_Константа(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланОбмена" Тогда
		ЗаполнитьРеквизитыОМ_ПланОбмена(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Справочник" Тогда
		ЗаполнитьРеквизитыОМ_Справочник(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Документ" Тогда
		ЗаполнитьРеквизитыОМ_Документ(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ЖурналДокументов" Тогда
		ЗаполнитьРеквизитыОМ_ЖурналДокументов(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Перечисление" Тогда
		ЗаполнитьРеквизитыОМ_Перечисление(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланВидовХарактеристик" Тогда
		ЗаполнитьРеквизитыОМ_ПланВидовХарактеристик(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланСчетов" Тогда
		ЗаполнитьРеквизитыОМ_ПланСчетов(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланВидовРасчета" Тогда
		ЗаполнитьРеквизитыОМ_ПланВидовРасчета(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрСведений" Тогда
		ЗаполнитьРеквизитыОМ_РегистрСведений(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрНакопления" Тогда
		ЗаполнитьРеквизитыОМ_РегистрНакопления(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрБухгалтерии" Тогда
		Результат.Вставить("Корреспонденция", ОМ.Корреспонденция);
		Результат.Вставить("МаксКоличествоСубконто", ОМ.ПланСчетов.МаксКоличествоСубконто);
		Результат.Вставить("ДополнительныеПараметры", Новый Структура("ЗаполнятьВидСубконто", Истина));
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") Тогда
			Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто = ДополнительныеПараметры.ЗаполнятьВидСубконто;
		КонецЕсли;
		Если ОМ.Корреспонденция Тогда
			ЗаполнитьРеквизитыОМ_РегистрБухгалтерииКорр(Результат, ОМ);
		Иначе
			ЗаполнитьРеквизитыОМ_РегистрБухгалтерииНеКорр(Результат, ОМ);
		КонецЕсли;
	ИначеЕсли Описание.ИмяЕдч = "РегистрРасчета" Тогда
		ЗаполнитьРеквизитыОМ_РегистрРасчета(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "БизнесПроцесс" Тогда
		ЗаполнитьРеквизитыОМ_БизнесПроцесс(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Задача" Тогда
		ЗаполнитьРеквизитыОМ_Задача(Результат, ОМ);
	ИначеЕсли СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных") И СтрЗаканчиваетсяНа(Описание.ИмяЕдч, ".Таблица") Тогда
		ЗаполнитьРеквизитыОМ_ВнешнийИсточникДанныхТаблица(Результат, ОМ);
	Иначе
		ВызватьИсключение "Неизвестный тип метаданных";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОМ_Константа(Результат, ОМ)
	
	ИмяКоллекции = "СтандартныеРеквизиты";
	Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
	Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Значение", "Значение", Неопределено, Истина);
	Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Значение", "Значение", Неопределено, Истина);
	Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланОбмена(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеПланаОбмена.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",ДатаОбмена,НомерПринятого,НомерОтправленного";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтотУзел,ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Справочник(Результат, ОМ)
	
	Результат.Вставить("Иерархический", ОМ.Иерархический);
	Результат.Вставить("ВидИерархии", Строка(ОМ.ВидИерархии));
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
		СтрокаРеквизитов = "Владелец,Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Владелец,Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтоГруппа,ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Документ(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Дата,Номер", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Проведен,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ЖурналДокументов(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Графы", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Дата,Номер,Тип", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Проведен,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Графы");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Перечисление(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Ссылка,Порядок", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланВидовХарактеристик(Результат, ОМ)
	
	Результат.Вставить("Иерархический", ОМ.Иерархический);
	Результат.Вставить("ВидИерархии", "ИерархияГруппИЭлементов");
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтоГруппа,ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,ТипЗначения,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланСчетов(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,ПризнакиУчета,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Порядок,Вид,Забалансовый,Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "ПризнакиУчета");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ИмяКоллекции = "ВидыСубконто";
	СтрокаРеквизитов = "НомерСтроки,Предопределенное,ВидСубконто,ТолькоОбороты";
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов);
	
	Для Каждого Реквизит Из ОМ.ПризнакиУчетаСубконто Цикл 
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланВидовРасчета(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",ПериодДействияБазовый";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	СтрокаРеквизитов = "НомерСтроки,Предопределенный,ВидРасчета";
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "БазовыеВидыРасчета", СтрокаРеквизитов);
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "ВедущиеВидыРасчета", СтрокаРеквизитов);
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "ВытесняющиеВидыРасчета", СтрокаРеквизитов);
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрСведений(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", ОМ.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки");
	
	Результат.Вставить("КлючЗаписи", КлючЗаписи(Результат));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрНакопления(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ВидДвижения,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки,ВидДвижения");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрБухгалтерииКорр(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Результат.Реквизиты.Имена.Добавить("СтандартныеРеквизиты");
	Результат.Реквизиты.Имена.Добавить("Измерения");
	Результат.Реквизиты.Имена.Добавить("СчетДт");   
	Результат.Реквизиты.Имена.Добавить("ИзмеренияДт");
	Результат.Реквизиты.Имена.Добавить("РесурсыДт");
	Результат.Реквизиты.Имена.Добавить("СчетКт");   
	Результат.Реквизиты.Имена.Добавить("ИзмеренияКт");
	Результат.Реквизиты.Имена.Добавить("РесурсыКт");
	Результат.Реквизиты.Имена.Добавить("Ресурсы");
	Результат.Реквизиты.Имена.Добавить("Реквизиты");
		
	Для Каждого ИмяКоллекции Из Результат.Реквизиты.Имена Цикл
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Для Каждого ИмяКоллекции Из СтрРазделить("Измерения,Ресурсы", ",") Цикл
		Для Каждого Реквизит Из ОМ[ИмяКоллекции] Цикл		
			Если Реквизит.Балансовый Тогда
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип);
				Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
				Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			Иначе
				Для Каждого ВидДвижения Из СтрРазделить("Дт,Кт", ",") Цикл
					ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Реквизит.Имя + ВидДвижения, Реквизит.Синоним + " " + ВидДвижения, Реквизит.Тип);
					Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции + ВидДвижения].Добавить(ЭлемОписание);
					Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции + ВидДвижения].Вставить(ЭлемОписание.Имя, ЭлемОписание);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого ВидДвижения Из СтрРазделить("Дт,Кт", ",") Цикл
		Счет = "Счет" + ВидДвижения;
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Счет, Счет, Неопределено);
		Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		Для Итер = 1 По Результат.МаксКоличествоСубконто Цикл
			Если Результат.ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") И Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто Тогда
				ВидСубконто = "ВидСубконто" + ВидДвижения + Итер;				
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип", ВидСубконто, ВидСубконто, Неопределено);
				Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
				Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			КонецЕсли;
			Субконто 	= "Субконто" + ВидДвижения + Итер;
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Субконто, Субконто, Неопределено);
			Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
			Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЦикла;
	КонецЦикла;
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрБухгалтерииНеКорр(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Результат.Реквизиты.Имена.Добавить("СтандартныеРеквизиты");
	Результат.Реквизиты.Имена.Добавить("Измерения");
	Результат.Реквизиты.Имена.Добавить("Счет");
	Результат.Реквизиты.Имена.Добавить("Ресурсы");
	Результат.Реквизиты.Имена.Добавить("Реквизиты");
		
	Для Каждого ИмяКоллекции Из Результат.Реквизиты.Имена Цикл
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ВидДвижения,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "Счет", "Счет", Неопределено);
	Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
	Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	
	Для Итер = 1 По Результат.МаксКоличествоСубконто Цикл
		Если Результат.ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") И Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто Тогда
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "ВидСубконто" + Итер, "ВидСубконто" + Итер, Неопределено);
			Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
			Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЕсли;
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "Субконто" + Итер, "Субконто" + Итер, Неопределено);
		Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки,ВидДвижения");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрРасчета(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПериодРегистрации,Регистратор,НомерСтроки,ВидРасчета,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "БазовыйПериодНачало,БазовыйПериодКонец,Сторно,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,ПериодРегистрации,НомерСтроки,ВидРасчета,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец,БазовыйПериодНачало,БазовыйПериодКонец,Сторно");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_БизнесПроцесс(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Номер,Дата,Стартован,Завершен,ВедущаяЗадача", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Задача(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты,РеквизитыАдресации", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеЗадачи.ВВидеНомера Тогда
		СтрокаРеквизитов = "Номер,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Номер";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Дата,Выполнена,БизнесПроцесс,ТочкаМаршрута";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "РеквизитыАдресации");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ВнешнийИсточникДанныхТаблица(Результат, ОМ)
	
	Результат.Вставить("ТипДанныхТаблицы", Строка(ОМ.ТипДанныхТаблицы));
	
	ИмяКоллекции = "СтандартныеРеквизиты";
	Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
	Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	Если ОМ.ТипДанныхТаблицы = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные Тогда	
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Ссылка", "Ссылка", Неопределено, Ложь);
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Ссылка", "Ссылка", Неопределено, Ложь);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЕсли;
	
	Для Каждого ИмяКоллекции Из СтрРазделить("Поля", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Поля");
	
	МассивСтрок = СтрРазделить(Результат.ИмяЕдч, ".");
	
	Если ОМ.ТипДанныхТаблицы = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные Тогда
		Результат.Вставить("ВыражениеТипаОбъект", "ВнешнийИсточникДанныхТаблицаОбъект." + МассивСтрок[1] + "." + Результат.Имя);
		Результат.Вставить("ВыражениеТипаСсылка", "ВнешнийИсточникДанныхТаблицаСсылка." + МассивСтрок[1] + "." + Результат.Имя);
	Иначе
		Результат.Вставить("ВыражениеТипаОбъект", "ВнешнийИсточникДанныхТаблицаМенеджерЗаписи." + МассивСтрок[1] + "." + Результат.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов, ЭтоШапка = Ложь)
	
	ТекКоллекция = ОМ["СтандартныеРеквизиты"];
	
	СтандартныеРеквизиты = Новый Структура();
	Для Каждого Реквизит Из ТекКоллекция Цикл
		СтандартныеРеквизиты.Вставить(Реквизит.Имя);
	КонецЦикла;

	Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаРеквизитов, ",") Цикл
		Если Не СтандартныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Реквизит = ТекКоллекция[ИмяРеквизита];
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		ЭлемОписание.Вставить("ЭтоШапка", ЭтоШапка);
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, ИмяКоллекции)
	
	ТекКоллекция = ОМ[ИмяКоллекции];
	Для Каждого Реквизит Из ТекКоллекция Цикл      
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		Если ЭлемОписание.Тип = Неопределено Тогда // ЖурналДокументов.Графы
			ЭлемОписание.Тип = Новый ОписаниеТипов();
		Иначе
			Если ЭлемОписание.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				ЭлемОписание.Вставить("ЭтоХранилищеЗначения", Истина);
			ИначеЕсли ЭлемОписание.Тип.СодержитТип(Тип("Строка")) И Реквизит.МногострочныйРежим = Истина Тогда
				ЭлемОписание.Вставить("МногострочныйРежим", Истина);
			КонецЕсли;
		КонецЕсли;
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСТЧ(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов)
	
	ОМТЧ = ОМ.СтандартныеТабличныеЧасти[ИмяКоллекции];
	Результат.ТЧ.Имена.Добавить(ИмяКоллекции);
	Результат.ТЧ.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.ТЧ.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	СтандартныеРеквизиты = Новый Структура();
	Для Каждого Реквизит Из ОМТЧ.СтандартныеРеквизиты Цикл
		СтандартныеРеквизиты.Вставить(Реквизит.Имя, Реквизит);
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаРеквизитов, ",") Цикл
		Если СтандартныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Реквизит = ОМТЧ.СтандартныеРеквизиты[ИмяРеквизита];
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
			ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
			Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
			Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТЧ(Результат, ОМ)
	
	Для Каждого ОМТЧ Из ОМ.ТабличныеЧасти Цикл
		ИмяКоллекции = ОМТЧ.Имя;
		Результат.ТЧ.Имена.Добавить(ИмяКоллекции);
		Результат.ТЧ.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.ТЧ.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
		Для Каждого ИмяГруппыРеквизитов Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
			Для Каждого Реквизит Из ОМТЧ[ИмяГруппыРеквизитов] Цикл
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
				ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
				Если ЭлемОписание.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
					ЭлемОписание.Вставить("ЭтоХранилищеЗначения", Истина);
				ИначеЕсли ЭлемОписание.Тип.СодержитТип(Тип("Строка")) И Реквизит.МногострочныйРежим = Истина Тогда
					ЭлемОписание.Вставить("МногострочныйРежим", Истина);
				КонецЕсли;
				Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
				Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Функция ОтобратьКоллекцию(Результат, СтрокаРеквизитов)
	
	Источник = Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты;
	
	Приемник = Новый Массив();
	Для Каждого Элем Из Новый Структура(СтрокаРеквизитов) Цикл
		Если Источник.Свойство(Элем.Ключ) Тогда
			Реквизит = Источник[Элем.Ключ];
			Приемник.Добавить(Новый Структура("Имя,Синоним,Тип", Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

Функция КлючЗаписи(Результат)
	
	Структ = Новый Структура();
	Если Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты.Свойство("Период") Тогда
		Структ.Вставить("Период");
	КонецЕсли;
	Если Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты.Свойство("Регистратор") Тогда
		Структ.Вставить("Регистратор");
	КонецЕсли;
	Для Каждого ЭлемОписание Из Результат.Реквизиты.ГруппыРеквизитовМассив.Измерения Цикл
		Структ.Вставить(ЭлемОписание.Имя);
	КонецЦикла;
	
	Возврат Структ;
	
КонецФункции

Функция КоллекцияМетаданных() Экспорт
	
	Коллекция = Новый Массив();
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыОбмена";
	Элем.ИмяЕдч 	= "ПланОбмена";
	Элем.Картинка 	= "ПланОбмена";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Константы";
	Элем.ИмяЕдч 	= "Константа";
	Элем.Картинка 	= "Константа";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Справочники";
	Элем.ИмяЕдч 	= "Справочник";
	Элем.Картинка 	= "Справочник";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Документы";
	Элем.ИмяЕдч 	= "Документ";
	Элем.Картинка 	= "Документ";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем); 
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ЖурналыДокументов";
	Элем.ИмяЕдч 	= "ЖурналДокументов";
	Элем.Картинка 	= "ЖурналДокументов";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Перечисления";
	Элем.ИмяЕдч 	= "Перечисление";
	Элем.Картинка 	= "Перечисление";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Отчеты";
	Элем.ИмяЕдч 	= "Отчет";
	Элем.Картинка 	= "Отчет";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Обработки";
	Элем.ИмяЕдч 	= "Обработка";
	Элем.Картинка 	= "Обработка";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыВидовХарактеристик";
	Элем.ИмяЕдч 	= "ПланВидовХарактеристик";
	Элем.Картинка 	= "ПланВидовХарактеристик";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыСчетов";
	Элем.ИмяЕдч 	= "ПланСчетов";
	Элем.Картинка 	= "ПланСчетов";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыВидовРасчета";
	Элем.ИмяЕдч 	= "ПланВидовРасчета";
	Элем.Картинка 	= "ПланВидовРасчета";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыСведений";
	Элем.ИмяЕдч 	= "РегистрСведений";
	Элем.Картинка 	= "РегистрСведений";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыНакопления";
	Элем.ИмяЕдч 	= "РегистрНакопления";
	Элем.Картинка 	= "РегистрНакопления";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыБухгалтерии";
	Элем.ИмяЕдч 	= "РегистрБухгалтерии";
	Элем.Картинка 	= "РегистрБухгалтерии";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыРасчета";
	Элем.ИмяЕдч 	= "РегистрРасчета";
	Элем.Картинка 	= "РегистрРасчета";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "БизнесПроцессы";
	Элем.ИмяЕдч 	= "БизнесПроцесс";
	Элем.Картинка 	= "БизнесПроцесс";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Задачи";
	Элем.ИмяЕдч 	= "Задача";
	Элем.Картинка 	= "Задача";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ВнешниеИсточникиДанных";
	Элем.ИмяЕдч 	= "ВнешнийИсточникДанных";
	Элем.Картинка 	= "ВнешнийИсточникДанных";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Возврат Коллекция;
	
КонецФункции

Функция ИнформацияОТипеМетаданныхПоСсылке(Знач Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	ИмяЕдч = СтрРазделить(ПолноеИмя, ".")[0];
	
	КоллекцияМетаданных = КоллекцияМетаданных();
	
	ИскомаяСтрока = Неопределено;
	Для Каждого Элем Из КоллекцияМетаданных Цикл
		Если Элем.ИмяЕдч = ИмяЕдч Тогда
			ИскомаяСтрока = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним", ИскомаяСтрока.ИмяМнч, ИскомаяСтрока.ИмяЕдч, МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицыРегистратора(Знач ИмяДокумента) Экспорт
	
	Результат = Новый Массив();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИмяМнч");
	ТЗ.Колонки.Добавить("ИмяЕдч");
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Синоним");
	
	Для Каждого СтруктураТипаРегистра Из ТипыРегистров() Цикл
		КОМ = Метаданные[СтруктураТипаРегистра["ИмяМнч"]];
		ТЗ.Очистить();
		Для Каждого ОМ Из Метаданные.Документы[ИмяДокумента].Движения Цикл		
			Если КОМ.Содержит(ОМ) Тогда
				НовСтр = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтруктураТипаРегистра);
				НовСтр.Имя = ОМ.Имя;
				НовСтр.Синоним = ОМ.Синоним;			
			КонецЕсли;
		КонецЦикла;   
		ТЗ.Сортировать("Имя");
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			СтруктураРегистра = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним");
			ЗаполнитьЗначенияСвойств(СтруктураРегистра, СтрокаТЗ);
			Результат.Добавить(СтруктураРегистра);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыРегистров()
	
	Результат = Новый Массив();
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрСведений", 	"РегистрыСведений"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрНакопления", 	"РегистрыНакопления"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрРасчета", 		"РегистрыРасчета"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрБухгалтерии", 	"РегистрыБухгалтерии"));
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоUUID(Знач Описание, Знач ReqUUID) Экспорт

	Менеджер = МенеджерПоИмени(Описание.ИмяМнч);
	Ссылка = Менеджер[Описание.Имя].ПолучитьСсылку(ReqUUID);
	ЕстьСсылка = ЕстьСсылка(Описание, Ссылка);	
	
	Возврат Новый Структура("Ссылка,ЕстьСсылка", Ссылка, ЕстьСсылка);
	
КонецФункции

Функция НайтиПоURL(Знач ReqURL) Экспорт
	
	Длина1 = 11;
	Поз1 = Найти(ReqURL, "e1cib/data/22е");
	Длина2 = 5;
    Поз2 = Найти(ReqURL, "?ref=");    
    ВыражениеТипа   = Сред(ReqURL, Длина1 + 1, Поз2 - Длина1 - 1);
    Текст = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ВыражениеТипа + ".ПустаяСсылка"));
    Текст = СтрЗаменить(Текст, "00000000000000000000000000000000", Сред(ReqURL, Поз2 + Длина2));
    Ссылка = ЗначениеИзСтрокиВнутр(Текст);
	
	Описание = ОписаниеОбъектаМетаданных(ТипЗнч(Ссылка));	
	ЕстьСсылка = ЕстьСсылка(Описание, Ссылка);	
	
	Возврат Новый Структура("Ссылка,ЕстьСсылка,Описание", Ссылка, ЕстьСсылка, Описание);
	
КонецФункции

// Только некоторые
Функция МенеджерПоИмени(Знач Имя) Экспорт
	
	Результат = Неопределено;
	Если СтрНачинаетсяС(Имя, "ПланыОбмена") Тогда
		Результат = ПланыОбмена;
	ИначеЕсли СтрНачинаетсяС(Имя, "Справочники") Тогда
		Результат = Справочники;
	ИначеЕсли СтрНачинаетсяС(Имя, "Документы") Тогда
		Результат = Документы;
	ИначеЕсли СтрНачинаетсяС(Имя, "Перечисления") Тогда
		Результат = Перечисления;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыВидовХарактеристик") Тогда
		Результат = ПланыВидовХарактеристик;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыСчетов") Тогда
		Результат = ПланыСчетов;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыВидовРасчета") Тогда
		Результат = ПланыВидовРасчета;
	ИначеЕсли СтрНачинаетсяС(Имя, "БизнесПроцессы") Тогда
		Результат = БизнесПроцессы;
	ИначеЕсли СтрНачинаетсяС(Имя, "Задачи") Тогда
		Результат = Задачи;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьСсылка(Знач Описание, Знач Ссылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	" + Описание.ИмяЕдч + "." + Описание.Имя + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли