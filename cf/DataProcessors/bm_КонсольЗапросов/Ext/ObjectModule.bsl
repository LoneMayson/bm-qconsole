#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
		
	Если Метаданные.ОбщиеМодули.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ОМ_ДополнительныеОтчетыИОбработки 				= Вычислить("ДополнительныеОтчетыИОбработки");
	ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер 	= Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");
	
	ПараметрыРегистрации = ОМ_ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид 				= ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия 			= "1.2.7";	
	ПараметрыРегистрации.Наименование 		= "bm Консоль запросов";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "bm Консоль запросов";
	НоваяКоманда.Идентификатор = "bm_КонсольЗапросов";
	НоваяКоманда.Использование = ОМ_ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеВремТаблицы

Функция СписокВТ() Экспорт
	
	СписокВТ = Новый Массив();
	СписокВТ.Добавить("ВидыСубконто");
	
	Возврат СписокВТ;
	
КонецФункции

Процедура СформироватьВремТаблицу(МенеджерВременныхТаблиц, Знач ИспользуемаяВТ, Знач ТЗ) Экспорт
	
	Если ИспользуемаяВТ = "ВидыСубконто" Тогда
		СформироватьВТ_ВидыСубконто(МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВТ_ВидыСубконто(МенеджерВременныхТаблиц)
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК Таблица
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК Ссылка,
	|	ТИП(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные) КАК ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ПустоеЗначениеСубконто
	|ПОМЕСТИТЬ ВидыСубконто
	|ГДЕ 
	|	ЛОЖЬ
	|";	
	
	НомерСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
			
			ТипСтрокой = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			
			Текст =
			"
			|ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	ТИП(@ТипСтрокой),
			|	@ПустойТипСтрокой
			|ИЗ 
			|	ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК Таблица
			|ГДЕ 
			|	Таблица.Ссылка = &@ИмяПараметра
			|";
			
			Текст = СтрЗаменить(Текст, "@ТипСтрокой", ТипСтрокой);
			Текст = СтрЗаменить(Текст, "@ПустойТипСтрокой", "ЗНАЧЕНИЕ("+ТипСтрокой+".ПустаяСсылка)");
			ИмяПараметра = "Ссылка" + Формат(НомерСтроки, "ЧГ=0");
			Текст = СтрЗаменить(Текст, "@ИмяПараметра", ИмяПараметра);
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|" + Текст;
			Запрос.УстановитьПараметр(ИмяПараметра, Выборка.Ссылка);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКода

Процедура ВыполнитьВБезопасномРежиме(Знач Алгоритм, Знач Параметры = Неопределено) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаВМоделиСервиса") <> Неопределено Тогда
		МодульРаботаВМоделиСервиса = Вычислить("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Выполнить Алгоритм;
	
КонецПроцедуры

Функция ВычислитьВБезопасномРежиме(Знач Выражение, Знач Параметры = Неопределено) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаВМоделиСервиса") <> Неопределено Тогда
		МодульРаботаВМоделиСервиса = Вычислить("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Возврат Вычислить(Выражение);
	
КонецФункции

#КонецОбласти

#Область КонсольЗапросов

Процедура ВыполнитьЗапросПакет(ПараметрыВызова, АдресРезультата) Экспорт
	
	ОбъектОбработки = ЭтотОбъект;
	
	Запрос = ОбъектОбработки.КонсольЗапросов_ЗапросИзОписания(ПараметрыВызова);
	
	РезультатВызова = ОбъектОбработки.КонсольЗапросов_РезультатЗапроса(Запрос, ПараметрыВызова);
	
	СтруктураРезультата = Новый Структура();                               
	СтруктураРезультата.Вставить("ЭтоПакет", 					ПараметрыВызова.ЭтоПакет);
	СтруктураРезультата.Вставить("Результат", 					РезультатВызова.Результат);
	СтруктураРезультата.Вставить("ДатаВремяЗапроса", 			РезультатВызова.ДатаВремяЗапроса);
	СтруктураРезультата.Вставить("ВремяВыполнения", 			РезультатВызова.ВремяВыполнения);
	СтруктураРезультата.Вставить("КоличествоТаблиц", 			?(Не ПараметрыВызова.ЭтоПакет, 1, РезультатВызова.Результат.Количество()));
	
	Если ПараметрыВызова.Свойство("ФормироватьТабДок") Тогда
		ОбъектОбработки.Результат_СформироватьДокументРезультат(СтруктураРезультата, ПараметрыВызова);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресРезультата);
	Иначе
		АдресРезультата = СтруктураРезультата;
	КонецЕсли;
	
КонецПроцедуры

Функция КонсольЗапросов_ЗапросИзОписания(ПараметрыВызова, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПараметрыВызова.ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено, Новый МенеджерВременныхТаблиц(), МенеджерВременныхТаблиц);
	//ИспользуемыеЗапросы+
	ИспользуемыеЗапросы = Неопределено;
	Если ПараметрыВызова.Свойство("ИспользуемыеЗапросы") И ПараметрыВызова.ИспользуемыеЗапросы.Количество() > 0 Тогда
		ИспользуемыеЗапросы = ПараметрыВызова.ИспользуемыеЗапросы;
		КонсольЗапросов_ВыполнитьИспользуемыеЗапросы(Запрос.МенеджерВременныхТаблиц, ИспользуемыеЗапросы);
	КонецЕсли;
	//ИспользуемыеЗапросы-
	КонсольЗапросов_ЗаполнитьВремТаблицы(Запрос.МенеджерВременныхТаблиц, ПараметрыВызова.ВремТаблицы, ИспользуемыеЗапросы);
	КонсольЗапросов_ЗаполнитьПараметрыЗапроса(Запрос, ПараметрыВызова.ПараметрыЗапроса);
	
	Возврат Запрос;
	
КонецФункции

Функция КонсольЗапросов_РезультатЗапроса(Запрос, ПараметрыВызова) Экспорт
	
	Перем Результат;
	
	ДатаВремяЗапроса = ТекущаяДата();
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ПараметрыВызова.Свойство("ТегЗапроса") Тогда
		
		ЗапросНачало = Новый Запрос("ВЫБРАТЬ """ + ПараметрыВызова.ТегЗапроса + "_begin"" КАК query_tag");
		ЗапросОкончание = Новый Запрос("ВЫБРАТЬ """ + ПараметрыВызова.ТегЗапроса + "_end"" КАК query_tag");
		
		Если Не ПараметрыВызова.ЭтоПакет Тогда
			ЗапросНачало.Выполнить();
			Результат = Запрос.Выполнить();		
			ЗапросОкончание.Выполнить();
		Иначе                     
			ЗапросНачало.Выполнить();
			Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
			ЗапросОкончание.Выполнить();
		КонецЕсли;
		
	Иначе 
		
		Если Не ПараметрыВызова.ЭтоПакет Тогда
			Результат = Запрос.Выполнить();
		Иначе
			Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВыполнения = ДатаОкончания - ДатаНачала;
	
	РезультатВызова = Новый Структура("ДатаВремяЗапроса,ДатаНачала,ДатаОкончания,ВремяВыполнения,Результат", ДатаВремяЗапроса, ДатаНачала, ДатаОкончания, ВремяВыполнения, Результат);
	
	Возврат РезультатВызова;
	
КонецФункции

Процедура КонсольЗапросов_ВыполнитьИспользуемыеЗапросы(МенеджерВременныхТаблиц, ИспользуемыеЗапросы)
	
	Для Каждого Строка Из ИспользуемыеЗапросы Цикл
		Запрос = КонсольЗапросов_ЗапросИзОписания(Строка.Значение, МенеджерВременныхТаблиц);
		Запрос.Выполнить();
	КонецЦикла;
	
КонецПроцедуры

Процедура КонсольЗапросов_ЗаполнитьВремТаблицы(МенеджерВременныхТаблиц, ВремТаблицы, ИспользуемыеЗапросы = Неопределено)
	
	Для Каждого Строка Из ВремТаблицы Цикл
		//ИспользуемыеЗапросы+
		Если ИспользуемыеЗапросы <> Неопределено И МенеджерВременныхТаблиц.Таблицы.Найти(Строка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;            
		//ИспользуемыеЗапросы-
		Если ТипЗнч(Строка.Значение) = Тип("ТаблицаЗначений") Тогда
			Значение = Строка.Значение;
		ИначеЕсли ЭтоАдресВременногоХранилища(Строка.Значение) Тогда
			Значение = ПолучитьИзВременногоХранилища(Строка.Значение);
		КонецЕсли;
		Если Строка.ТипЗначения = "Таблица значений" И ПустаяСтрока(Строка.ИспользуемаяВТ) Тогда
			Запросы_ЗагрузитьВТ(МенеджерВременныхТаблиц, Строка.Имя, Значение);
		ИначеЕсли Не ПустаяСтрока(Строка.ИспользуемаяВТ) Тогда
			ОбъектОбработки = ЭтотОбъект;
			ОбъектОбработки.СформироватьВремТаблицу(МенеджерВременныхТаблиц, Строка.ИспользуемаяВТ, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонсольЗапросов_ЗаполнитьПараметрыЗапроса(Запрос, ПараметрыЗапроса)
	
	ОбъектОбработки = Неопределено;
	МодульОбщегоНазначения = Неопределено;
	ЕстьФункцииРаботыВБезопасномРежиме = Ложь;
	
	ЕстьКод = (ПараметрыЗапроса.НайтиСтроки(Новый Структура("ФлагКод", Истина)).Количество() > 0);
	Если ЕстьКод Тогда
		ОбъектОбработки = ЭтотОбъект;
		Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
			МодульОбщегоНазначения = Вычислить("ОбщегоНазначения");
			Попытка			
				Результат = МодульОбщегоНазначения.ВычислитьВБезопасномРежиме("Истина");
				ЕстьФункцииРаботыВБезопасномРежиме = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПараметрыЗапроса Цикл
		Если СтрокаТаблицы.ТипЗначения = "Таблица значений" Тогда
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("ТаблицаЗначений") Тогда
				Значение = СтрокаТаблицы.Значение;
			ИначеЕсли ЭтоАдресВременногоХранилища(СтрокаТаблицы.Значение) Тогда
				Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ФлагГраница Тогда
			Если Найти(СтрокаТаблицы.ВидГраницы, "Дата") > 0 Тогда
				ВидГраницыЗначения = ?(Найти(СтрокаТаблицы.ВидГраницы, "включая") > 0, ВидГраницы.Включая, ВидГраницы.Исключая);
				Значение = Новый Граница(СтрокаТаблицы.Значение, ВидГраницыЗначения);
			ИначеЕсли Найти(СтрокаТаблицы.ВидГраницы, "Момент") > 0 Тогда
				ВидГраницыЗначения = ?(Найти(СтрокаТаблицы.ВидГраницы, "включая") > 0, ВидГраницы.Включая, ВидГраницы.Исключая);
				Значение = Новый Граница(СтрокаТаблицы.Значение.МоментВремени(), ВидГраницыЗначения);				
			КонецЕсли; 
		ИначеЕсли СтрокаТаблицы.ТипЗначения.СодержитТип(Тип("ОписаниеТипов")) Тогда
			Значение = Запросы_ТипИзОписанияТипов(СтрокаТаблицы.Значение);
		ИначеЕсли СтрокаТаблицы.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			Значение = Запросы_МоментВремениИзСсылки(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		Если СтрокаТаблицы.ФлагКод Тогда
			Контекст = Новый Структура("Значение", Значение);
			Если СтрокаТаблицы.ВидКода = "Выражение" Тогда
				Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
					Значение = МодульОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				Иначе
					Значение = ОбъектОбработки.ВычислитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				КонецЕсли;
			Иначе
				Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
					МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				Иначе
					ОбъектОбработки.ВыполнитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				КонецЕсли;
				Значение = Контекст.Значение;
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр(СтрокаТаблицы.Имя, Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция КонсольЗапросов_ПараметрыМакета(НастройкиФормы)
	
	ОбъектОбработки = ЭтотОбъект;
	Макет = ОбъектОбработки.ПолучитьМакет("Макет");
	
	ПараметрыМакета = Новый Структура();                
	ПараметрыМакета.Вставить("ОбластьЗаголовокВТ", 				Макет.ПолучитьОбласть("ЗаголовокВТ"));
	ПараметрыМакета.Вставить("ОбластьШапкаПерваяКолонка", 		Макет.ПолучитьОбласть("ШапкаПерваяКолонка"));
	ПараметрыМакета.Вставить("ОбластьПерваяКолонка", 			Макет.ПолучитьОбласть("ПерваяКолонка"));
	ПараметрыМакета.Вставить("ОбластьШапкаТипЗаписи", 			Макет.ПолучитьОбласть("ШапкаТипЗаписи"));
	ПараметрыМакета.Вставить("ОбластьШапкаУровень", 			Макет.ПолучитьОбласть("ШапкаУровень"));
	ПараметрыМакета.Вставить("ОбластьШапкаГруппировка", 		Макет.ПолучитьОбласть("ШапкаГруппировка"));
	ПараметрыМакета.Вставить("ОбластьШапкаЗначение", 			Макет.ПолучитьОбласть("ШапкаЗначение"));
	ПараметрыМакета.Вставить("ОбластьТипЗаписи", 				Макет.ПолучитьОбласть("ТипЗаписи"));
	ПараметрыМакета.Вставить("ОбластьУровень", 					Макет.ПолучитьОбласть("Уровень"));
	ПараметрыМакета.Вставить("ОбластьГруппировка", 				Макет.ПолучитьОбласть("Группировка"));
	ПараметрыМакета.Вставить("ОбластьЗначение", 				Макет.ПолучитьОбласть("Значение"));
	ПараметрыМакета.Вставить("ЦветФонаОбычный", 				ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона);
	ПараметрыМакета.Вставить("ЦветФонаРезультатЗапроса",		Новый Цвет(250, 235, 215));
	ПараметрыМакета.Вставить("ЦветФонаNull", 					Новый Цвет(255, 210, 170));
	ПараметрыМакета.Вставить("ЦветФонаНеопределено", 			Новый Цвет(250, 235, 215));
	ПараметрыМакета.Вставить("ЦветТекстОбычный", 				Новый Цвет(0, 0, 0));
	ПараметрыМакета.Вставить("ЦветТекстОтр", 					Новый Цвет(255, 0, 0));
	
	Если НастройкиФормы.НастройкаФиксированнаяШиринаКолонок Тогда
		ТабДок = ПараметрыМакета.ОбластьЗаголовокВТ;
		Для НомерКолонки = 2 По 50 Цикл
			ОбластьЯчеек = ТабДок.Область(,НомерКолонки,,НомерКолонки);
			ОбластьЯчеек.ШиринаКолонки = НастройкиФормы.НастройкаШиринаКолонок;
		КонецЦикла;
		ПараметрыМакета.ОбластьШапкаЗначение.Области.ШапкаЗначение.ШиринаКолонки = НастройкиФормы.НастройкаШиринаКолонок;
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ШиринаКолонки = НастройкиФормы.НастройкаШиринаКолонок;
	КонецЕсли;
	Если НастройкиФормы.НастройкаПереноситьТекст Тогда                                                               
		ПараметрыМакета.ОбластьТипЗаписи.Области.ТипЗаписи.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьУровень.Области.Уровень.РазмещениеТекста 		= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьГруппировка.Области.Группировка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьЗначение.Области.Значение.РазмещениеТекста 		= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
	Возврат ПараметрыМакета;
	
КонецФункции

#КонецОбласти

#Область ВремТаблицы

Процедура Запросы_ЗагрузитьВТ(МенеджерВТ, Знач ИмяВТ, Знач ТЗ)
	
	Запросы_ПроверитьТЗНаПомещение(ТЗ);
	
	// 2024-11-09+
	Резт = Запросы_ПроверитьКолонкиНаМоментВремени(МенеджерВТ, ИмяВТ, ТЗ);
	Если Резт Тогда
		Возврат;
	КонецЕсли;
	Резт = Запросы_ПроверитьКолонкиНаТипЗначенияТип(МенеджерВТ, ИмяВТ, ТЗ);
	Если Резт Тогда
		Возврат;
	КонецЕсли;
	// 2024-11-09-
	
	КоличествоКолонок = ТЗ.Колонки.Количество();
	
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерКолонки = 1;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Постфикс = ?(НомерКолонки = КоличествоКолонок, "", ",");
		ТекстДок.ДобавитьСтроку(Символы.Таб + "ТЗ." + Колонка.Имя + Постфикс);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяВТ);
	ТекстДок.ДобавитьСтроку("ИЗ");
	ТекстДок.ДобавитьСтроку(Символы.Таб + "&ТЗ КАК ТЗ");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = ТекстДок.ПолучитьТекст();
	Запрос.Выполнить();	
	
КонецПроцедуры

Процедура Запросы_ПроверитьТЗНаПомещение(ТЗ)
	
	ЗаменяемыеКолонки = Новый Массив();
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.ТипЗначения.Типы().Количество() = 0 Тогда
			ЗаменяемыеКолонки.Добавить(Колонка.Имя);			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаменяемыеКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = ТЗ.Скопировать();
	
	Итер = ЗаменяемыеКолонки.Количество()-1;
	Пока Итер >= 0 Цикл
		ИмяКолонки 		= ЗаменяемыеКолонки[Итер];
		ПрежняяКолонка  = ТЗ.Колонки[ИмяКолонки];
		Описание 		= Новый ОписаниеТипов(ПрежняяКолонка.ТипЗначения, "Null,Число");
		МассивЗначений 	= ТЗ.ВыгрузитьКолонку(ПрежняяКолонка);
		ТЗ.Колонки.Удалить(ПрежняяКолонка);                                             			
		НоваяКолонка	= ТЗ.Колонки.Добавить(ИмяКолонки, Описание);
		ТЗ.ЗагрузитьКолонку(МассивЗначений, НоваяКолонка);
		Итер = Итер-1;
	КонецЦикла;
	
КонецПроцедуры

Функция Запросы_ПроверитьКолонкиНаМоментВремени(МенеджерВТ, Знач ИмяВТ, Знач ТЗ)
	
	ЗаменяемыеКолонки = Новый Массив();
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ЗаменяемыеКолонки.Добавить(Колонка.Имя);			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаменяемыеКолонки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗ = ТЗ.Скопировать();
	
	Для Итер = 0 По ЗаменяемыеКолонки.Количество() - 1 Цикл
		ИмяКолонки 		= ЗаменяемыеКолонки[Итер];
		Описание 		= Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "Null");
		НоваяКолонка	= ТЗ.Колонки.Добавить("МоментВремениСсылка_" + ИмяКолонки, Описание);
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если ТипЗнч(СтрокаТЗ[ИмяКолонки]) = Тип("МоментВремени") Тогда
				СтрокаТЗ[НоваяКолонка.Имя] = СтрокаТЗ[ИмяКолонки].Ссылка;
			Иначе
				СтрокаТЗ[НоваяКолонка.Имя] = СтрокаТЗ[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоКолонок = ТЗ.Колонки.Количество();
	
	//помещение
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерКолонки = 1;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если ЗаменяемыеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
			НомерКолонки = НомерКолонки + 1;
			Продолжить;
		КонецЕсли;                        
		Выражение = "";
		Постфикс = ?(НомерКолонки = КоличествоКолонок, "", ",");
		Если СтрНачинаетсяС(Колонка.Имя, "МоментВремениСсылка_") Тогда
			Выражение = Символы.Таб + "ТЗ." + Колонка.Имя + Постфикс;
		Иначе
			Выражение = Символы.Таб + "ТЗ." + Колонка.Имя + Постфикс;
		КонецЕсли;
		ТекстДок.ДобавитьСтроку(Выражение);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ ЗаменаМоментВремени_" + ИмяВТ);
	ТекстДок.ДобавитьСтроку("ИЗ");
	ТекстДок.ДобавитьСтроку(Символы.Таб + "&ТЗ КАК ТЗ");
	
	ТекстДок.ДобавитьСтроку(";");
	ТекстДок.ДобавитьСтроку("");
	ТекстДок.ДобавитьСтроку("////////////////////////////////////////////////////////////////////////////////");
	
	//выборка
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерКолонки = 1;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если ЗаменяемыеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
			НомерКолонки = НомерКолонки + 1;
			Продолжить;
		КонецЕсли;                        
		Выражение = "";
		Постфикс = ?(НомерКолонки = КоличествоКолонок, "", ",");
		Если СтрНачинаетсяС(Колонка.Имя, "МоментВремениСсылка_") Тогда
			Выражение = Символы.Таб + "ТЗ." + Колонка.Имя  + ".МоментВремени КАК " + СтрЗаменить(Колонка.Имя, "МоментВремениСсылка_", "") + Постфикс;
		Иначе
			Выражение = Символы.Таб + "ТЗ." + Колонка.Имя + Постфикс;
		КонецЕсли;
		ТекстДок.ДобавитьСтроку(Выражение);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяВТ);
	ТекстДок.ДобавитьСтроку("ИЗ");
	ТекстДок.ДобавитьСтроку(Символы.Таб + "ЗаменаМоментВремени_" + ИмяВТ + " КАК ТЗ");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = ТекстДок.ПолучитьТекст();
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Функция Запросы_ПроверитьКолонкиНаТипЗначенияТип(МенеджерВТ, Знач ИмяВТ, Знач ТЗ)
	
	ЗаменяемыеКолонки = Новый Массив();
	ОставляемыеКолонки = Новый Массив();
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
			ЗаменяемыеКолонки.Добавить(Колонка.Имя);
		Иначе
			ОставляемыеКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаменяемыеКолонки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЗам = ЗаменяемыеКолонки.Количество();
	КоличествоОст = ОставляемыеКолонки.Количество();
	
	ИмяТабПрочиеДанные = "ЗаменаТипПрочиеДанные_" + ИмяВТ;
	ИмяТабТипыЗначений = "ЗаменаТипТипыЗначений_" + ИмяВТ;
	
	ТЗ = ТЗ.Скопировать();
	
	ТЗ.Колонки.Добавить("ЗаменаТип_НомерСтроки", Новый ОписаниеТипов("Число"));
	НомерСтроки = 1;
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.ЗаменаТип_НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТекстДок = Новый ТекстовыйДокумент();
	
	//помещение типов значений
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерСтроки = 1;
	Для Итер = 0 По ТЗ.Количество() - 1 Цикл
		Если НомерСтроки > 1 Тогда
			ТекстДок.ДобавитьСтроку("");
			ТекстДок.ДобавитьСтроку("ОБЪЕДИНИТЬ ВСЕ");
			ТекстДок.ДобавитьСтроку("");
			ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
		КонецЕсли;
		СтрокаТЗ = ТЗ[Итер];
		ТекстДок.ДобавитьСтроку(Символы.Таб + Формат(НомерСтроки, "ЧЦ=10; ЧГ=0") + " КАК ЗаменаТип_НомерСтроки,");
		НомерКолонки = 1;
		Для Каждого ИмяКолонки Из ЗаменяемыеКолонки Цикл
			Постфикс = "";
			Постфикс = ?(НомерКолонки = КоличествоЗам, "", ",");
			Выражение = Символы.Таб + Запросы_ВыражениеВыборкиТипаЗначения(СтрокаТЗ[ИмяКолонки]) + " КАК " + ИмяКолонки + Постфикс;
			ТекстДок.ДобавитьСтроку(Выражение);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;               
		Если НомерСтроки = 1 Тогда
			ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяТабТипыЗначений);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	//помещение прочих данных
	
	Если КоличествоОст > 0 Тогда
		
		ТекстДок.ДобавитьСтроку(";");
		ТекстДок.ДобавитьСтроку("");
		ТекстДок.ДобавитьСтроку("////////////////////////////////////////////////////////////////////////////////");
		
		ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
		ТекстДок.ДобавитьСтроку(Символы.Таб + "ТЗ.ЗаменаТип_НомерСтроки КАК ЗаменаТип_НомерСтроки,");
		
		НомерКолонки = 1;
		Для Каждого ИмяКолонки Из ОставляемыеКолонки Цикл			
			Постфикс = ?(НомерКолонки = КоличествоОст, "", ",");
			ТекстДок.ДобавитьСтроку(Символы.Таб + "ТЗ." + ИмяКолонки + Постфикс);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		
		ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяТабПрочиеДанные);
		ТекстДок.ДобавитьСтроку("ИЗ");
		ТекстДок.ДобавитьСтроку(Символы.Таб + "&ТЗ КАК ТЗ");
	
	КонецЕсли;
	
	ТекстДок.ДобавитьСтроку(";");
	ТекстДок.ДобавитьСтроку("");
	ТекстДок.ДобавитьСтроку("////////////////////////////////////////////////////////////////////////////////");
	
	//выборка
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерКолонки = 1;
	Для Каждого ИмяКолонки Из ЗаменяемыеКолонки Цикл
		Постфикс = ?(НомерКолонки = КоличествоЗам И КоличествоОст = 0, "", ",");
		ТекстДок.ДобавитьСтроку(Символы.Таб + ИмяТабТипыЗначений + "." + ИмяКолонки + Постфикс);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	НомерКолонки = 1;
	Для Каждого ИмяКолонки Из ОставляемыеКолонки Цикл
		Постфикс = ?(НомерКолонки = КоличествоОст, "", ",");
		ТекстДок.ДобавитьСтроку(Символы.Таб + ИмяТабПрочиеДанные + "." + ИмяКолонки + Постфикс);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяВТ);
	ТекстДок.ДобавитьСтроку("ИЗ");
	ТекстДок.ДобавитьСтроку(Символы.Таб + ИмяТабТипыЗначений);
	
	Если КоличествоОст > 0 Тогда
		ТекстДок.ДобавитьСтроку(Символы.Таб + "ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТабПрочиеДанные + " КАК " + ИмяТабПрочиеДанные);
		ТекстДок.ДобавитьСтроку(Символы.Таб + Символы.Таб + "ПО " + ИмяТабТипыЗначений + ".ЗаменаТип_НомерСтроки = " + ИмяТабПрочиеДанные + ".ЗаменаТип_НомерСтроки");
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = ТекстДок.ПолучитьТекст();
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Функция Запросы_ВыражениеВыборкиТипаЗначения(ТипЗначения)
	
	Резт = "НЕОПРЕДЕЛЕНО";
	
	ОМ = Метаданные.НайтиПоТипу(ТипЗначения);
	Если ОМ <> Неопределено Тогда
		Резт = ОМ.ПолноеИмя();
	Иначе
		Резт = Строка(ТипЗначения);
	КонецЕсли;
	
	Резт = "ТИП(" + Резт + ")";
	
	Возврат Резт;
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

Функция Запросы_ТипИзОписанияТипов(Знач Значение) 
	
	Результат = Тип("Неопределено");
	
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		МассивТипов = Значение.Типы();
		Если МассивТипов.Количество() = 0 Тогда
			Результат = Тип("Неопределено");
		ИначеЕсли МассивТипов.Количество() = 1 Тогда
			Результат = МассивТипов[0];
		Иначе
			Результат = Новый СписокЗначений();
			Результат.ЗагрузитьЗначения(МассивТипов);
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементСписка Из Значение Цикл
			ЗначениеПараметра = Запросы_ТипИзОписанияТипов(ЭлементСписка.Значение);
			Если ТипЗнч(ЗначениеПараметра) = Тип("Тип") Тогда
				Результат.Добавить(ЗначениеПараметра);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ЗначениеПараметра Цикл
					Результат.Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция Запросы_МоментВремениИзСсылки(Знач Значение)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда
		Результат = Значение.МоментВремени();			
	Иначе
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементСписка Из Значение Цикл
			Результат.Добавить(ЭлементСписка.Значение.МоментВремени());
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

#КонецОбласти

#Область ДокументРезультат

Процедура Результат_СформироватьДокументРезультат(СтруктураРезультата, ПараметрыВызова) Экспорт
	
	СхемаЗапроса = Неопределено;
	Если ПараметрыВызова.Свойство("СхемаЗапроса") Тогда
		СхемаЗапроса = ПараметрыВызова.СхемаЗапроса;
	ИначеЕсли ПараметрыВызова.Свойство("ТекстЗапроса") Тогда
		Попытка                                                
			СхемаЗапроса = Новый СхемаЗапроса();
			СхемаЗапроса.УстановитьТекстЗапроса(ПараметрыВызова.ТекстЗапроса);
		Исключение
			СхемаЗапроса = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураРезультата.Вставить("ТабДок", 						Новый ТабличныйДокумент());	
	СтруктураРезультата.Вставить("Заголовки", 					Новый Массив());	
	СтруктураРезультата.Вставить("НастройкиФормы", 				ПараметрыВызова.НастройкиФормы);
	СтруктураРезультата.Вставить("ПараметрыМакета", 			КонсольЗапросов_ПараметрыМакета(ПараметрыВызова.НастройкиФормы));	
	СтруктураРезультата.Вставить("СхемаЗапроса", СхемаЗапроса);
	
	СтруктураРезультата.Заголовки.Добавить(Формат(СтруктураРезультата.ВремяВыполнения, "ЧЦ=10; ЧН=") + " ms");
		
	Если ТипЗнч(СтруктураРезультата.Результат) = Тип("Массив") И СтруктураРезультата.СхемаЗапроса = Неопределено Тогда
		СтруктураРезультата.Заголовки.Добавить("Сформировано без схемы запроса");
	КонецЕсли;
	
	Если ПараметрыВызова.Свойство("ФоновоеЗадание") Тогда
		ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
		ФоновоеЗадание = ТекущийСеанс.ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание <> Неопределено Тогда
			СтруктураРезультата.Заголовки.Добавить("Выполнено в фоновом задании");
		КонецЕсли;
	КонецЕсли;
	
	Результат_ВывестиЗаголовки(СтруктураРезультата, СтруктураРезультата.Заголовки);
		
	Если ТипЗнч(СтруктураРезультата.Результат) = Тип("РезультатЗапроса") Тогда
		Результат_ВывестиЗапрос(СтруктураРезультата);
	ИначеЕсли СтруктураРезультата.СхемаЗапроса <> Неопределено Тогда
		Результат_ВывестиПакетСоСхемойЗапроса(СтруктураРезультата);
	Иначе
		Результат_ВывестиПакетБезСхемыЗапроса(СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиЗапрос(СтруктураРезультата)
	
	Результат_ВывестиВыборку(СтруктураРезультата, СтруктураРезультата.Результат, 0, Истина);
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиПакетСоСхемойЗапроса(СтруктураРезультата)
	
	ПакетЗапросов = СтруктураРезультата.СхемаЗапроса.ПакетЗапросов;
	
	ИндексЗапроса = 0;
	
	Для Каждого ЭлементКоллекции Из ПакетЗапросов Цикл
		
		РезультатЗапроса 	= СтруктураРезультата.Результат[ИндексЗапроса];	
		Открыта				= ((ИндексЗапроса + 1) = ПакетЗапросов.Количество());
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") И ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта);
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") И Не ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта, ЭлементКоллекции.ТаблицаДляПомещения);
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Результат_ВывестиУничтожениеВТ(СтруктураРезультата, ИндексЗапроса, ЭлементКоллекции.ИмяТаблицы);
		КонецЕсли;
		
		ИндексЗапроса = ИндексЗапроса + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиПакетБезСхемыЗапроса(СтруктураРезультата)
	
	ПакетЗапросов = СтруктураРезультата.Результат;
	
	ИндексЗапроса = 0;
	
	Для Каждого РезультатЗапроса Из ПакетЗапросов Цикл
		
		Если РезультатЗапроса = Неопределено Тогда
			Результат_ВывестиУничтожениеВТ(СтруктураРезультата, ИндексЗапроса, "");
			Продолжить;
		КонецЕсли;
		
		Открыта	= ((ИндексЗапроса + 1) = ПакетЗапросов.Количество());
		
		Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта);
		
		ИндексЗапроса = ИндексЗапроса + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиЗаголовки(СтруктураРезультата, Знач Заголовки)
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	
	Для Каждого Строка Из Заголовки Цикл
		ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Строка;	
		СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	КонецЦикла;
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиВыборку(СтруктураРезультата, Знач РезультатЗапроса, Знач ИндексЗапроса, Знач Открыта = Истина, Знач ИмяВТ = "")
	
	ТабДок = Новый ТабличныйДокумент();
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	Выборка 		= РезультатЗапроса.Выбрать();
	СтрокВыборки	= Выборка.Количество();
	КоличествоСтрок = СтрокВыборки;
	Если СтруктураРезультата.НастройкиФормы.НастройкаМаксКоличествоСтрок > 0 Тогда
		Если КоличествоСтрок > 0 Тогда
			КоличествоСтрок = ?(КоличествоСтрок < СтруктураРезультата.НастройкиФормы.НастройкаМаксКоличествоСтрок, КоличествоСтрок, СтруктураРезультата.НастройкиФормы.НастройкаМаксКоличествоСтрок);
		КонецЕсли;
	КонецЕсли;
	
	Наименование = "Запрос " + ИндексЗапроса;	
	Если Не ПустаяСтрока(ИмяВТ) Тогда
		Наименование = Наименование + " (" + ИмяВТ + ")";
	КонецЕсли;	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Наименование + ": " + КоличествоСтрок + " из " + СтрокВыборки;	
	ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	ТекущийУровень = ?(Открыта, 0, 1);
	ТабДок.Вывести(ПараметрыМакета.ОбластьШапкаПерваяКолонка, ТекущийУровень, , Открыта);
	
	Если СтруктураРезультата.НастройкиФормы.НастройкаВыводитьСвойстваВыборки Тогда
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаТипЗаписи, ТекущийУровень, , Открыта);
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаУровень, ТекущийУровень, , Открыта);
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаГруппировка, ТекущийУровень, , Открыта);
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ПараметрыМакета.ОбластьШапкаЗначение.Параметры.Значение = Колонка.Имя;
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаЗначение, ТекущийУровень, , Открыта);
	КонецЦикла;	
	
	НомерСтроки = 1;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийУровень = Выборка.Уровень() + ?(Открыта, 0, Истина);
		
		ТабДок.Вывести(ПараметрыМакета.ОбластьПерваяКолонка, ТекущийУровень);
		
		Если СтруктураРезультата.НастройкиФормы.НастройкаВыводитьСвойстваВыборки Тогда
			
			ПараметрыМакета.ОбластьТипЗаписи.Параметры.ТипЗаписи = Выборка.ТипЗаписи();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьТипЗаписи, ТекущийУровень);
			
			ПараметрыМакета.ОбластьУровень.Параметры.Уровень = Выборка.Уровень();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьУровень, ТекущийУровень);
			
			ПараметрыМакета.ОбластьГруппировка.Параметры.Группировка = Выборка.Группировка();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьГруппировка, ТекущийУровень);
		
		КонецЕсли;
		
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Результат_ПрименитьОформление(СтруктураРезультата, ПараметрыМакета, Выборка[Колонка.Имя]);
			ТабДок.Присоединить(ПараметрыМакета.ОбластьЗначение, ТекущийУровень);			
		КонецЦикла;
		
		Если СтруктураРезультата.НастройкиФормы.НастройкаМаксКоличествоСтрок > 0 И НомерСтроки >= СтруктураРезультата.НастройкиФормы.НастройкаМаксКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;		
		
	КонецЦикла;
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);	
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	Если Не СтруктураРезультата.НастройкиФормы.НастройкаФиксированнаяШиринаКолонок Тогда
		Результат_УстановитьШиринуКолонок(СтруктураРезультата, ТабДок);
	КонецЕсли;
	
	СтруктураРезультата.ТабДок.Вывести(ТабДок);
	
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиУничтожениеВТ(СтруктураРезультата, Знач ИндексЗапроса, Знач ИмяВТ)
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	
	СтруктураРезультата.ТабДок.НачатьАвтогруппировкуСтрок();
	
	Наименование = "Запрос " + ИндексЗапроса + " (уничтожение " + ИмяВТ + ") ";
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Наименование;	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	СтруктураРезультата.ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

&НаСервере
Процедура Результат_ПрименитьОформление(СтруктураРезультата, ПараметрыМакета, Значение)
	
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "РезультатЗапроса";
	ИначеЕсли Значение = Null Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "NULL";
	ИначеЕсли Значение = Неопределено Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "НЕОПРЕДЕЛЕНО";
	Иначе
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаРезультатЗапроса;			
	ИначеЕсли Значение = Null Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаNull;
	ИначеЕсли Значение = Неопределено Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаНеопределено;				
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаОбычный;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("Число") И Значение < 0 И СтруктураРезультата.НастройкиФормы.НастройкаВыделятьОтрицательные Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветТекста = ПараметрыМакета.ЦветТекстОтр;
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветТекста = ПараметрыМакета.ЦветТекстОбычный;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("Число") И Не ПустаяСтрока(СтруктураРезультата.НастройкиФормы.НастройкаФорматЧисла) Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.Формат = СтруктураРезультата.НастройкиФормы.НастройкаФорматЧисла;
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.Формат = "";
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура Результат_УстановитьШиринуКолонок(СтруктураРезультата, ТабДок)
	
	МинШирина = 17;
	НачСтрока = 2;
	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	ТабДок.Область(НачСтрока, , КоличествоСтрок-1, ).СоздатьФорматСтрок();
	Для НомерКолонки = НачСтрока По ТабДок.ШиринаТаблицы Цикл
		ОбластьЯчеекШапки = ТабДок.Область(НачСтрока, НомерКолонки, НачСтрока, НомерКолонки);
		ШиринаКолонки 	= МинШирина;
		Для НомерСтроки = НачСтрока По КоличествоСтрок Цикл
			ОбластьЯчеек = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Ширина = ОбластьЯчеек.Отступ + СтрДлина(ОбластьЯчеек.Текст);
			Если Ширина > ШиринаКолонки Тогда
				ШиринаКолонки = Ширина;
			КонецЕсли;
		КонецЦикла;
		Если СтруктураРезультата.НастройкиФормы.НастройкаМаксШиринаКолонок > 0 И ШиринаКолонки > СтруктураРезультата.НастройкиФормы.НастройкаМаксШиринаКолонок Тогда
			ШиринаКолонки = СтруктураРезультата.НастройкиФормы.НастройкаМаксШиринаКолонок;
		КонецЕсли;
		ОбластьЯчеекШапки.ШиринаКолонки = ШиринаКолонки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеЗапроса

Функция СохранитьЗапрос(Знач Запрос, Знач Наименование = "") Экспорт
	
	Наименование 		= ?(ПустаяСтрока(Наименование), "Запрос", Наименование);
	СохраняемыеДанные 	= ЗапросВДеревоЗначений(Запрос, Наименование);
	
	МЗ = РегистрыСведений.bm_Запросы.СоздатьМенеджерЗаписи();
	МЗ.Идентификатор 	= Новый УникальныйИдентификатор();
	МЗ.Наименование 	= Наименование;
	МЗ.Дата 			= ТекущаяДата();
	МЗ.Хранилище 		= Новый ХранилищеЗначения(СохраняемыеДанные);
	МЗ.Записать();

	Возврат Истина;
	
КонецФункции

Функция ЗапросВСтроку(Знач Запрос, Знач Наименование = "") Экспорт
	
	Наименование 		= ?(ПустаяСтрока(Наименование), "Запрос", Наименование);
	СохраняемыеДанные 	= ЗапросВДеревоЗначений(Запрос, Наименование);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СохраняемыеДанные);
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВХ(Знач Запрос, Знач Наименование = "") Экспорт
	
	Наименование 		= ?(ПустаяСтрока(Наименование), "Запрос", Наименование);
	СохраняемыеДанные 	= ЗапросВДеревоЗначений(Запрос, Наименование);
	
	Результат = ПоместитьВоВременноеХранилище(СохраняемыеДанные, Новый УникальныйИдентификатор());
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВДеревоЗначений(Знач Запрос, Знач Наименование)
	
	Попытка     
		СхемаЗапроса = Новый СхемаЗапроса();			
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ИсключениеСхемыЗапроса = Ложь;
	Исключение   
		СхемаЗапроса = Неопределено;
		ИсключениеСхемыЗапроса = Истина;
	КонецПопытки;
	
	ДеревоЗапросов = Новый ДеревоЗначений();
	ДеревоЗапросов.Колонки.Добавить("Наименование");
	ДеревоЗапросов.Колонки.Добавить("Исключение");
	ДеревоЗапросов.Колонки.Добавить("СтруктураЗапроса");
	
	ПараметрыЗапроса = Новый ТаблицаЗначений();
	ПараметрыЗапроса.Колонки.Добавить("Имя");
	ПараметрыЗапроса.Колонки.Добавить("ТипЗначения");
	ПараметрыЗапроса.Колонки.Добавить("Значение");   
	ПараметрыЗапроса.Колонки.Добавить("ФлагСЗ");
	ПараметрыЗапроса.Колонки.Добавить("ФлагГраница");
	ПараметрыЗапроса.Колонки.Добавить("ВидГраницы");
	
	ВремТаблицы = Новый ТаблицаЗначений();
	ВремТаблицы.Колонки.Добавить("Имя");
	ВремТаблицы.Колонки.Добавить("ТипЗначения");
	ВремТаблицы.Колонки.Добавить("Значение");	
	ВремТаблицы.Колонки.Добавить("ИспользуемаяВТ");
	
	ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, Запрос);
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		
		Если СхемаЗапроса <> Неопределено Тогда
			
	   		ЗаполнитьВременныеТаблицыСоСхемойЗапроса(ВремТаблицы, Запрос.МенеджерВременныхТаблиц, СхемаЗапроса);
			
		Иначе
			
			ЗаполнитьВременныеТаблицыБезСхемыЗапроса(ВремТаблицы, Запрос.МенеджерВременныхТаблиц, Запрос.Текст);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("ТекстЗапроса", 		Запрос.Текст);	
	СтруктураЗапроса.Вставить("Исключение", 		ИсключениеСхемыЗапроса);	
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", 	ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВремТаблицы", 		ВремТаблицы);
	
	НовСтр = ДеревоЗапросов.Строки.Добавить();
	НовСтр.Наименование 	= Наименование;
	НовСтр.Исключение 		= ИсключениеСхемыЗапроса;
	НовСтр.СтруктураЗапроса = СтруктураЗапроса;
	
	Возврат ДеревоЗапросов;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, Знач Запрос)
	
	Попытка
		ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Исключение
		ОписаниеПараметровЗапроса = Неопределено;
	КонецПопытки;
	
	Для Каждого КИЗ Из Запрос.Параметры Цикл
		
		Имя 		= КИЗ.Ключ;
		Значение 	= КИЗ.Значение;

		Если ОписаниеПараметровЗапроса <> Неопределено Тогда
			Описание = ОписаниеПараметровЗапроса.Найти(Имя);
		Иначе
			Описание = Неопределено;
		КонецЕсли;
		
		НовСтр = ПараметрыЗапроса.Добавить();
		НовСтр.Имя 			= Имя;
		
		ЗаполнитьПараметр(НовСтр, Значение, Описание);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметр(НовСтр, Знач ЗначениеПараметра, Знач ОписаниеПараметра)
	
	Если ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("ТаблицаЗначений")) Тогда
		НовСтр.ТипЗначения = Строка(Тип("ТаблицаЗначений"));
	ИначеЕсли ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("Тип")) Тогда
		НовСтр.ТипЗначения = Новый ОписаниеТипов("ОписаниеТипов");
	Иначе
		НовСтр.ТипЗначения = ТипЗначенияПараметра(ЗначениеПараметра, ОписаниеПараметра);
	КонецЕсли;
	
	Если ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("ТаблицаЗначений")) Тогда
		НовСтр.Значение = ЗначениеПараметра;
	ИначеЕсли ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("Тип")) Тогда
		НовСтр.Значение = ОписаниеТиповИзТипа(ЗначениеПараметра);	
	ИначеЕсли ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("МоментВремени")) Тогда
		НовСтр.Значение = СсылкаИзМоментаВремени(ЗначениеПараметра);			
	ИначеЕсли ПараметрСодержитТип(ЗначениеПараметра, ОписаниеПараметра, Тип("Граница")) Тогда
		НовСтр.ФлагГраница = Истина;
		Граница = ЗначениеПараметра;
		Если ТипЗнч(Граница.Значение) = Тип("Дата") Тогда
			Если Граница.ВидГраницы = ВидГраницы.Включая Тогда
				НовСтр.ВидГраницы = "Дата включая";
			Иначе
				НовСтр.ВидГраницы = "Дата исключая";
			КонецЕсли;
			НовСтр.Значение = Граница.Значение;
		ИначеЕсли ТипЗнч(Граница.Значение) = Тип("МоментВремени") Тогда
			Если Граница.ВидГраницы = ВидГраницы.Включая Тогда
				НовСтр.ВидГраницы = "Момент включая";
			Иначе
				НовСтр.ВидГраницы = "Момент исключая";
			КонецЕсли;
			НовСтр.Значение = Граница.Значение.Ссылка;
		КонецЕсли;			
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений();
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		НовСтр.Значение = СписокЗначений;			
	Иначе
		НовСтр.Значение = ЗначениеПараметра;
	КонецЕсли;
	
	Если ТипЗнч(НовСтр.Значение) = Тип("СписокЗначений") Тогда
		НовСтр.ФлагСЗ = Истина;
		НовСтр.Значение.ТипЗначения = НовСтр.ТипЗначения;
	КонецЕсли;

КонецПроцедуры

Функция ПараметрСодержитТип(Знач ЗначениеПараметра, Знач ОписаниеПараметра, Знач ИскомыйТип)
	
	Результат = Ложь;
	
	ТипЗнчПараметра = ТипЗнч(ЗначениеПараметра);
	
	Если (ОписаниеПараметра <> Неопределено И ОписаниеПараметра.ТипЗначения.СодержитТип(ИскомыйТип))
		Или ТипЗнчПараметра = ИскомыйТип Тогда
		Результат = Истина;
	ИначеЕсли ТипЗнчПараметра = Тип("Массив") И ЗначениеПараметра.Количество() > 0 Тогда
		Результат = ПараметрСодержитТип(ЗначениеПараметра[0], ОписаниеПараметра, ИскомыйТип);
	ИначеЕсли ТипЗнчПараметра = Тип("СписокЗначений") И ЗначениеПараметра.Количество() > 0 Тогда
		Результат = ПараметрСодержитТип(ЗначениеПараметра[0], ОписаниеПараметра, ИскомыйТип);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипЗначенияПараметра(Знач ЗначениеПараметра, Знач ОписаниеПараметра)
	
	ТипЗнчПараметра = ТипЗнч(ЗначениеПараметра);
	
	МассивТипов = Новый Массив();
	
	Если ОписаниеПараметра <> Неопределено И ОписаниеПараметра.ТипЗначения.Типы().Количество() > 0 Тогда
		Возврат ОписаниеПараметра.ТипЗначения;
	ИначеЕсли ТипЗнчПараметра = Тип("Массив") И ЗначениеПараметра.Количество() > 0 Тогда
		МассивТипов.Добавить(ТипЗнч(ЗначениеПараметра[0]));
	ИначеЕсли ТипЗнчПараметра = Тип("СписокЗначений") И ЗначениеПараметра.Количество() > 0 Тогда
		МассивТипов.Добавить(ТипЗнч(ЗначениеПараметра[0]));
	Иначе
		МассивТипов.Добавить(ТипЗнчПараметра);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(МассивТипов);
		
КонецФункции

Функция ОписаниеТиповИзТипа(Знач Значение)
	
	МассивТипов = Новый Массив();
	
	Если ТипЗнч(Значение) = Тип("Тип") Тогда
		МассивТипов.Добавить(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементКоллекции Из Значение Цикл
			МассивТипов.Добавить(ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементКоллекции Из Значение Цикл
			МассивТипов.Добавить(ЭлементКоллекции);
		КонецЦикла;		
	КонецЕсли;
	
	Результат = Новый ОписаниеТипов(МассивТипов);
	
	Возврат Результат;
			
КонецФункции

Функция СсылкаИзМоментаВремени(Знач Значение)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		Результат = Значение.Ссылка;			
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции.Значение.Ссылка);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции.Ссылка);
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

Процедура ЗаполнитьВременныеТаблицыСоСхемойЗапроса(ВремТаблицы, Знач МенеджерВременныхТаблиц, Знач СхемаЗапроса)
	
	ТаблицыДляПомещения = Новый Массив();
	
	Для Каждого ЭлементКоллекции Из СхемаЗапроса.ПакетЗапросов Цикл		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") И Не ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			ТаблицыДляПомещения.Добавить(ЭлементКоллекции.ТаблицаДляПомещения);
		КонецЕсли;		
	КонецЦикла;
			
	Для Каждого ВременнаяТаблицаЗапроса Из МенеджерВременныхТаблиц.Таблицы Цикл
		
		Параметр = ТаблицыДляПомещения.Найти(ВременнаяТаблицаЗапроса.ПолноеИмя);
		
		Если Параметр = Неопределено Тогда
			
			НовСтр = ВремТаблицы.Добавить();
			НовСтр.Имя 			= ВременнаяТаблицаЗапроса.ПолноеИмя;
			НовСтр.ТипЗначения 	= "Таблица значений";
			НовСтр.Значение		= ВременнаяТаблицаЗапроса.ПолучитьДанные().Выгрузить();
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьВременныеТаблицыБезСхемыЗапроса(ВремТаблицы, Знач МенеджерВременныхТаблиц, Знач ТекстЗапроса)
	
	ТекстЗапроса = СократитьПробелы(ВРЕГ(ТекстЗапроса));
	
	Для Каждого ВременнаяТаблицаЗапроса Из МенеджерВременныхТаблиц.Таблицы Цикл
		
		Если СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ " + ВРЕГ(ВременнаяТаблицаЗапроса.ПолноеИмя) + Символы.ПС) = 0
			И СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ " + ВРЕГ(ВременнаяТаблицаЗапроса.ПолноеИмя) + " ") = 0 Тогда
			
			НовСтр = ВремТаблицы.Добавить();
			НовСтр.Имя 			= ВременнаяТаблицаЗапроса.ПолноеИмя;
			НовСтр.ТипЗначения 	= "Таблица значений";
			НовСтр.Значение		= ВременнаяТаблицаЗапроса.ПолучитьДанные().Выгрузить();
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция СократитьПробелы(Знач Текст)
	
	Пока СтрНайти(Текст, "  ") > 0 Цикл
		Текст = СтрЗаменить(Текст, "  ", " ");
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область РаботаСТЖ

Функция РаботаСТЖ_НастройкиКонфигурацииЛогов() Экспорт
	
	Результат = Новый Структура("ЭтоКлиентСервер,ПутьКФайлуКонфигурацииЛогов,КаталогЛогов", Ложь, "", "");
	Результат.ЭтоКлиентСервер = (СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 0);	
	Результат.ПутьКФайлуКонфигурацииЛогов =  РаботаСТЖ_ПутьКФайлуКонфигурацииЛогов();	
	Если СтрЗаканчиваетсяНа(Результат.ПутьКФайлуКонфигурацииЛогов, "logcfg.xml") Тогда
		Результат.КаталогЛогов = РаботаСТЖ_КаталогЛогов(Результат.ПутьКФайлуКонфигурацииЛогов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РаботаСТЖ_ПутьКФайлуКонфигурацииЛогов()
	
	Резт = "";
	
	ИскомыйКаталог = РаботаСТЖ_КаталогКонфФайлов();
	Если ПустаяСтрока(ИскомыйКаталог) Тогда
		Возврат Резт;
	КонецЕсли;
	
	ПутьКФайлу = ИскомыйКаталог + "logcfg.xml";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Резт = ПутьКФайлу;
	Иначе
		Резт = ИскомыйКаталог; 
	КонецЕсли;
	
	Возврат Резт;
	
КонецФункции

Функция РаботаСТЖ_КаталогКонфФайлов()
	
	ИскомыйКаталог = "";
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если НЕ ((СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64)) Тогда
		Возврат ИскомыйКаталог;
	КонецЕсли;
	
	ПутьКФайлу = КаталогПрограммы() + "conf" + ПолучитьРазделительПутиСервера() + "conf.cfg";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу);
		ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Пока ТекСтрока <> Неопределено Цикл
			Позиция = СтрНайти(ТекСтрока, "ConfLocation=");
			Если Позиция > 0 Тогда 
				ИскомыйКаталог = СокрЛП(Сред(ТекСтрока, Позиция + 13));
				Прервать;
			КонецЕсли;
			ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
		ЧтениеТекста.Закрыть();
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИскомыйКаталог) Тогда                      
		ИскомыйКаталог = СокрЛП(ИскомыйКаталог);
		ИскомыйКаталог = ИскомыйКаталог + ПолучитьРазделительПути();
	КонецЕсли;
	
	Возврат ИскомыйКаталог;
	
КонецФункции

Функция РаботаСТЖ_КаталогЛогов(Знач ПутьКФайлуКонфигурацииЛогов)
	
	ИскомыйКаталог = "";
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуКонфигурацииЛогов);
	ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ТекСтрока <> Неопределено Цикл
		Позиция = СтрНайти(ТекСтрока, "<log");
		Если Позиция > 0 Тогда                
			Позиция = СтрНайти(ТекСтрока, "location=");
			Если Позиция > 0 Тогда
				Поз1 = СтрНайти(ТекСтрока, """", , Позиция);
				Поз2 = СтрНайти(ТекСтрока, """", , Поз1 + 1);
				Если Поз1 > 0 И Поз2 > 0 Тогда
					ИскомыйКаталог = Сред(ТекСтрока, Поз1 + 1, Поз2 - Поз1 - 1);
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	ИскомыйКаталог = СокрЛП(ИскомыйКаталог);
	
	Возврат ИскомыйКаталог;
	
КонецФункции

Функция РаботаСТЖ_События(Знач ПутьКФайлуКонфигурацииЛогов)
	
	ИскомыеСобытия = Новый Массив();
	ИскомыеСобытия.Добавить("sdbl");
	ИскомыеСобытия.Добавить("dbv8dbeng");
	ИскомыеСобытия.Добавить("dbmssql");
	ИскомыеСобытия.Добавить("dbpostgrs");
	ИскомыеСобытия.Добавить("dboracle");
	ИскомыеСобытия.Добавить("db2");
	
	Результат = Новый Массив();
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуКонфигурацииЛогов);
	ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ТекСтрока <> Неопределено Цикл
		ТекСтрока = НРег(ТекСтрока);
		Для Каждого ИскомоеСобытие Из ИскомыеСобытия Цикл
			Если СтрНайти(ТекСтрока, """" + ИскомоеСобытие + """") > 0 Тогда
				Результат.Добавить(ИскомоеСобытие);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция РаботаСТЖ_СписокКаталоговЛогов(Знач КаталогЛогов) Экспорт
	
	Результат = Новый СписокЗначений();
	
	Если Прав(КаталогЛогов, 1) <> ПолучитьРазделительПути() Тогда
		КаталогЛогов = КаталогЛогов + ПолучитьРазделительПути();
	КонецЕсли;
		
	МассивФайлов = НайтиФайлы(КаталогЛогов, "*");
	Для Каждого Файл Из МассивФайлов Цикл
		Результат.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеЛога

Функция ЧтениеЛога_ПрочитатьЛог(Знач ТегЗапроса, Знач КаталогЛогов) Экспорт
	
	Результат = Новый Структура("ПолноеИмяФайлаЛогов,НайденФайлЛогов,ЛогТекст,ЛогHTML", "", Ложь, "");
	
	ИскомоеИмя = Формат(ТекущаяДата(), "ДФ=yyMMddHH") + ".log";
	ПолноеИмяФайлаЛогов = КаталогЛогов + ПолучитьРазделительПути() + ИскомоеИмя;
	Результат.ПолноеИмяФайлаЛогов = ПолноеИмяФайлаЛогов;
	
	МассивФайлов = НайтиФайлы(КаталогЛогов + ПолучитьРазделительПути(), ИскомоеИмя);
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.НайденФайлЛогов = Истина;
	
	ПутьКФайлуЛогов = МассивФайлов[0].ПолноеИмя;
	ИмяВремФайлаЛогов = ПолучитьИмяВременногоФайла("log");
	КопироватьФайл(ПутьКФайлуЛогов, ИмяВремФайлаЛогов);
	
	МассивСтрок = Новый Массив();
	                    
	Тег_begin 		= ТегЗапроса + "_begin";
	Тег_end 		= ТегЗапроса + "_end";
	Контекст_begin 	= "ЗапросНачало";
	Позиция_begin 	= 0;
	Есть_begin 		= Ложь;
	ЕстьНачСтрока	= Ложь;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВремФайлаЛогов);
	ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ТекСтрока <> Неопределено Цикл	
		Если СтрНайти(ТекСтрока, Тег_end) > 0 Тогда
			МассивСтрок.Добавить(ТекСтрока);
			Прервать;
		КонецЕсли;
		Если Не Есть_begin Тогда
			Если СтрНайти(ТекСтрока, Тег_begin) Тогда 
				Есть_begin = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ЕстьНачСтрока И Есть_begin Тогда
			ЕстьНачСтрока = СтрНайти(ТекСтрока, ":") = 3 И СтрНайти(ТекСтрока, ".") = 6;
		КонецЕсли;
		Если ЕстьНачСтрока Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли;
		ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяВремФайлаЛогов);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
		
	ИскомыеСтроки = Новый Массив();
	ИскомыеСтроки.Добавить(Тег_begin);
	ИскомыеСтроки.Добавить(Тег_end);
	ИскомыеСтроки.Добавить("Func=HoldConnection");
	МассивСтрок = ЧтениеЛога_ОбработатьСобытия(МассивСтрок, ИскомыеСтроки);

	МассивСтрок = ЧтениеЛога_ОбработатьСвойства(МассивСтрок);
	МассивСтрок = ЧтениеЛога_РазделитьЗаписи(МассивСтрок);
	
	ТекстДок = Новый ТекстовыйДокумент();
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ТекстДок.ДобавитьСтроку(ТекСтрока);
	КонецЦикла;

	Результат.ЛогТекст = ТекстДок.ПолучитьТекст();
	Результат.ЛогHTML = ЧтениеЛога_HTMLДокумент(МассивСтрок);
	
	Возврат Результат;
	
КонецФункции

Функция ЧтениеЛога_ОбработатьСобытия(МассивСтрок, ИскомыеСтроки)
	
	Результат = Новый Массив();
	ТекМассив = Новый Массив();
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ЭтоНачСтрока = СтрНайти(ТекСтрока, ":") = 3 И СтрНайти(ТекСтрока, ".") = 6;
		Если ЭтоНачСтрока И ТекМассив.Количество() > 0 И ЧтениеЛога_ОбработатьСобытияПроверитьМассив(ТекМассив, ИскомыеСтроки) Тогда
			Для Каждого Элем Из ТекМассив Цикл
				Результат.Добавить(Элем);
			КонецЦикла;
			ТекМассив.Очистить();
		КонецЕсли;
		ТекМассив.Добавить(ТекСтрока);
	КонецЦикла;
	Если ТекМассив.Количество() > 0 И ЧтениеЛога_ОбработатьСобытияПроверитьМассив(ТекМассив, ИскомыеСтроки) Тогда
		Для Каждого Элем Из ТекМассив Цикл
			Результат.Добавить(Элем);
		КонецЦикла;
	КонецЕсли;
	ТекМассив.Очистить();
	
	Возврат Результат;
	
КонецФункции

Функция ЧтениеЛога_ОбработатьСобытияПроверитьМассив(МассивСтрок, ИскомыеСтроки)
	
	ТекСтрока = МассивСтрок[0];
	ЭтоНачСтрока = СтрНайти(ТекСтрока, ":") = 3 И СтрНайти(ТекСтрока, ".") = 6;
	Если Не ЭтоНачСтрока Тогда
		МассивСтрок.Очистить();
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			Если СтрНайти(ТекСтрока, ИскомаяСтрока) > 0 Тогда
				МассивСтрок.Очистить();
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЧтениеЛога_ОбработатьСвойства(МассивСтрок)
	
	Результат = Новый Массив();
	ИскомыеСтроки = Новый Массив();
	ИскомыеСтроки.Добавить("Sql=");
	ИскомыеСтроки.Добавить("Sdbl=");
	ИскомыеСтроки.Добавить("Rows=");
	ИскомыеСтроки.Добавить("planSQLText=");
	ИскомыеСтроки.Добавить("Context=");
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ВыделенныйМассив = ЧтениеЛога_ОбработатьСвойстваОбработатьСтроку(ТекСтрока, ИскомыеСтроки);
		Для Каждого Элем Из ВыделенныйМассив Цикл
			Результат.Добавить(Элем);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЧтениеЛога_ОбработатьСвойстваОбработатьСтроку(ТекСтрока, ИскомыеСтроки)
	
	Если СтрДлина(ТекСтрока) < 2 Тогда
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ТекСтрока);
		Возврат МассивСтрок;
	КонецЕсли;
	
	Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
		Поз = СтрНайти(ТекСтрока, ИскомаяСтрока, , 2);
		Если Поз > 0 Тогда
			МассивСтрок = Новый Массив();
			МассивСтрок.Добавить(Лев(ТекСтрока, Поз - 1));
			ОстМассив = ЧтениеЛога_ОбработатьСвойстваОбработатьСтроку(Сред(ТекСтрока, Поз), ИскомыеСтроки);
			Для Каждого Элем Из ОстМассив Цикл
				МассивСтрок.Добавить(Элем);
			КонецЦикла;
			Возврат МассивСтрок;
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(ТекСтрока);
	Возврат МассивСтрок;
	
КонецФункции

Функция ЧтениеЛога_РазделитьЗаписи(МассивСтрок)
	
	Результат = Новый Массив();
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ЭтоНачСтрока = СтрНайти(ТекСтрока, ":") = 3 И СтрНайти(ТекСтрока, ".") = 6;
		Если ЭтоНачСтрока И Результат.Количество() > 0 Тогда
			Результат.Добавить("");
		КонецЕсли;
		Результат.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЧтениеЛога_HTMLДокумент(МассивСтрок)
	
	ТекстДокумент = Новый ТекстовыйДокумент();
	Текст =
	"<!doctype html>
	|<html>
	|<head>
	|<title>Лог ТЖ</title>
	|</head>
	|<body>
	|<pre style=""font-family: 'Consolas';font-size: 10pt;"">";
	ТекстДокумент.УстановитьТекст(Текст);
	
	ЭтоКонтекст = Ложь;
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		Если ПустаяСтрока(ТекСтрока) И ЭтоКонтекст Тогда
			ТекстДокумент.ДобавитьСтроку("</span>");
			ЭтоКонтекст = Ложь;
			Продолжить;
		КонецЕсли;
		
		ЭтоНачСтрока = СтрНайти(ТекСтрока, ":") = 3 И СтрНайти(ТекСтрока, ".") = 6;
		Если ЭтоНачСтрока Тогда                                                                                      
			Если ЭтоКонтекст Тогда // не должно
				ТекстДокумент.ДобавитьСтроку("</span>");
				ЭтоКонтекст = Ложь;
				Продолжить;
			КонецЕсли;
			Поз = СтрНайти(ТекСтрока, ",", , , 3);
			ТекСтрока = "<span style = ""color:darkblue"">" + Лев(ТекСтрока, Поз) + "</span>" + Сред(ТекСтрока, Поз + 1);
		//ИначеЕсли СтрНайти(ТекСтрока, "bm_КонсольЗапросов") > 0 Или СтрНачинаетсяС(ТекСтрока, Символы.Таб) Тогда
			//	ТекСтрока = "<span style = ""color:gray"">" + ТекСтрока + "</span>";
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "Context=") Тогда
			ТекСтрока = "<span style = ""color:gray"">" + ТекСтрока;
			ЭтоКонтекст = Истина;
		КонецЕсли;
		
		ТекстДокумент.ДобавитьСтроку(ТекСтрока);
		
	КонецЦикла;
	
	ТекстДокумент.ДобавитьСтроку("</pre>");
	ТекстДокумент.ДобавитьСтроку("</body>");
	ТекстДокумент.ДобавитьСтроку("</html>");
	
	Результат = ТекстДокумент.ПолучитьТекст();
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

Функция ТекстФайла(ПутьКФайлу) Экспорт
	
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.Прочитать(ПутьКФайлу);
	Результат = ТекстДок.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСКонфигурацией

Функция ЭтоСсылка(Тип) Экспорт
	
	Результат = Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или Документы.ТипВсеСсылки().СодержитТип(Тип)	
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОбъектаМетаданных(Знач ОписаниеСсылка, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеСсылка) = Тип("Структура") Тогда
		Описание = ОписаниеСсылка;	
	ИначеЕсли ТипЗнч(ОписаниеСсылка) = Тип("Тип") Тогда
		Описание = ИнформацияОТипеМетаданныхПоСсылке(Новый(ОписаниеСсылка));
	Иначе
		Описание = ИнформацияОТипеМетаданныхПоСсылке(ОписаниеСсылка);
	КонецЕсли;
		
	Результат = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним");
	ЗаполнитьЗначенияСвойств(Результат, Описание);
	
	Если СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных") Тогда
		ОМ = Вычислить("Метаданные." + Описание.ИмяМнч + "." + Описание.Имя);
	Иначе
		ОМ = Метаданные[Описание.ИмяМнч][Описание.Имя];
	КонецЕсли;
	
	Результат.Вставить("Реквизиты", Новый Структура("Имена,ГруппыРеквизитовМассив,ГруппыРеквизитовСтруктура", Новый Массив(), Новый Структура(), Новый Структура()));
	Результат.Вставить("ТЧ", Новый Структура("Имена,ГруппыРеквизитовМассив,ГруппыРеквизитовСтруктура", Новый Массив(), Новый Структура(), Новый Структура()));
	Результат.Вставить("СтдРекНЗ");
	
	Результат.Вставить("ЭтоРегистрСведений", СтрНачинаетсяС(Описание.ИмяЕдч, "РегистрСведений"));
	Результат.Вставить("ЭтоВнешИсточник", СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных"));
	Результат.Вставить("ЕстьДвижения", (Описание.ИмяЕдч = "Документ" И Метаданные.Документы[Описание.Имя].Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить));
	
	ОсновнаяТаблица = Результат.ИмяЕдч + "." + Результат.Имя;
	Если Результат.ИмяЕдч = "РегистрБухгалтерии" Тогда
		ОсновнаяТаблица = ОсновнаяТаблица + ".ДвиженияССубконто";
	КонецЕсли;
	Если Описание.ИмяЕдч = "ВнешнийИсточникДанныхТаблица" Тогда
		ОсновнаяТаблица = "ВнешнийИсточникДанных." + Описание.ИмяВнешИсточника + ".Таблица." + Описание.Имя;
	КонецЕсли;
	Результат.Вставить("ОсновнаяТаблица", ОсновнаяТаблица);
	
	Если Описание.ИмяЕдч = "Константа" Тогда
		ЗаполнитьРеквизитыОМ_Константа(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланОбмена" Тогда
		ЗаполнитьРеквизитыОМ_ПланОбмена(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Справочник" Тогда
		ЗаполнитьРеквизитыОМ_Справочник(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Документ" Тогда
		ЗаполнитьРеквизитыОМ_Документ(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ЖурналДокументов" Тогда
		ЗаполнитьРеквизитыОМ_ЖурналДокументов(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Перечисление" Тогда
		ЗаполнитьРеквизитыОМ_Перечисление(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланВидовХарактеристик" Тогда
		ЗаполнитьРеквизитыОМ_ПланВидовХарактеристик(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланСчетов" Тогда
		ЗаполнитьРеквизитыОМ_ПланСчетов(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "ПланВидовРасчета" Тогда
		ЗаполнитьРеквизитыОМ_ПланВидовРасчета(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрСведений" Тогда
		ЗаполнитьРеквизитыОМ_РегистрСведений(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрНакопления" Тогда
		ЗаполнитьРеквизитыОМ_РегистрНакопления(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "РегистрБухгалтерии" Тогда
		Результат.Вставить("Корреспонденция", ОМ.Корреспонденция);
		Результат.Вставить("МаксКоличествоСубконто", ОМ.ПланСчетов.МаксКоличествоСубконто);
		Результат.Вставить("ДополнительныеПараметры", Новый Структура("ЗаполнятьВидСубконто", Истина));
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") Тогда
			Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто = ДополнительныеПараметры.ЗаполнятьВидСубконто;
		КонецЕсли;
		Если ОМ.Корреспонденция Тогда
			ЗаполнитьРеквизитыОМ_РегистрБухгалтерииКорр(Результат, ОМ);
		Иначе
			ЗаполнитьРеквизитыОМ_РегистрБухгалтерииНеКорр(Результат, ОМ);
		КонецЕсли;
	ИначеЕсли Описание.ИмяЕдч = "РегистрРасчета" Тогда
		ЗаполнитьРеквизитыОМ_РегистрРасчета(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "БизнесПроцесс" Тогда
		ЗаполнитьРеквизитыОМ_БизнесПроцесс(Результат, ОМ);
	ИначеЕсли Описание.ИмяЕдч = "Задача" Тогда
		ЗаполнитьРеквизитыОМ_Задача(Результат, ОМ);
	ИначеЕсли СтрНачинаетсяС(Описание.ИмяЕдч, "ВнешнийИсточникДанных") И СтрЗаканчиваетсяНа(Описание.ИмяЕдч, ".Таблица") Тогда
		ЗаполнитьРеквизитыОМ_ВнешнийИсточникДанныхТаблица(Результат, ОМ);
	Иначе
		ВызватьИсключение "Неизвестный тип метаданных";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОМ_Константа(Результат, ОМ)
	
	ИмяКоллекции = "СтандартныеРеквизиты";
	Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
	Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Значение", "Значение", Неопределено, Истина);
	Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Значение", "Значение", Неопределено, Истина);
	Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланОбмена(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеПланаОбмена.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",ДатаОбмена,НомерПринятого,НомерОтправленного";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтотУзел,ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Справочник(Результат, ОМ)
	
	Результат.Вставить("Иерархический", ОМ.Иерархический);
	Результат.Вставить("ВидИерархии", Строка(ОМ.ВидИерархии));
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
		СтрокаРеквизитов = "Владелец,Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Владелец,Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтоГруппа,ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Документ(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Дата,Номер", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Проведен,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ЖурналДокументов(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Графы", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Дата,Номер,Тип", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Проведен,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Графы");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Перечисление(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Ссылка,Порядок", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланВидовХарактеристик(Результат, ОМ)
	
	Результат.Вставить("Иерархический", ОМ.Иерархический);
	Результат.Вставить("ВидИерархии", "ИерархияГруппИЭлементов");
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ЭтоГруппа,ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,ТипЗначения,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланСчетов(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,ПризнакиУчета,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Порядок,Вид,Забалансовый,Родитель";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "ПризнакиУчета");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ИмяКоллекции = "ВидыСубконто";
	СтрокаРеквизитов = "НомерСтроки,Предопределенное,ВидСубконто,ТолькоОбороты";
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов);
	
	Для Каждого Реквизит Из ОМ.ПризнакиУчетаСубконто Цикл 
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ПланВидовРасчета(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеКода Тогда
		СтрокаРеквизитов = "Код,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Код";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",ПериодДействияБазовый";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Предопределенный,ИмяПредопределенныхДанных,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	СтрокаРеквизитов = "НомерСтроки,Предопределенный,ВидРасчета";
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "БазовыеВидыРасчета", СтрокаРеквизитов);
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "ВедущиеВидыРасчета", СтрокаРеквизитов);
	ЗаполнитьРеквизитыСТЧ(Результат, ОМ, "ВытесняющиеВидыРасчета", СтрокаРеквизитов);
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрСведений(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", ОМ.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки");
	
	Результат.Вставить("КлючЗаписи", КлючЗаписи(Результат));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрНакопления(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ВидДвижения,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки,ВидДвижения");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрБухгалтерииКорр(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Результат.Реквизиты.Имена.Добавить("СтандартныеРеквизиты");
	Результат.Реквизиты.Имена.Добавить("Измерения");
	Результат.Реквизиты.Имена.Добавить("СчетДт");   
	Результат.Реквизиты.Имена.Добавить("ИзмеренияДт");
	Результат.Реквизиты.Имена.Добавить("РесурсыДт");
	Результат.Реквизиты.Имена.Добавить("СчетКт");   
	Результат.Реквизиты.Имена.Добавить("ИзмеренияКт");
	Результат.Реквизиты.Имена.Добавить("РесурсыКт");
	Результат.Реквизиты.Имена.Добавить("Ресурсы");
	Результат.Реквизиты.Имена.Добавить("Реквизиты");
		
	Для Каждого ИмяКоллекции Из Результат.Реквизиты.Имена Цикл
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Для Каждого ИмяКоллекции Из СтрРазделить("Измерения,Ресурсы", ",") Цикл
		Для Каждого Реквизит Из ОМ[ИмяКоллекции] Цикл		
			Если Реквизит.Балансовый Тогда
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип);
				Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
				Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			Иначе
				Для Каждого ВидДвижения Из СтрРазделить("Дт,Кт", ",") Цикл
					ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Реквизит.Имя + ВидДвижения, Реквизит.Синоним + " " + ВидДвижения, Реквизит.Тип);
					Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции + ВидДвижения].Добавить(ЭлемОписание);
					Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции + ВидДвижения].Вставить(ЭлемОписание.Имя, ЭлемОписание);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого ВидДвижения Из СтрРазделить("Дт,Кт", ",") Цикл
		Счет = "Счет" + ВидДвижения;
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Счет, Счет, Неопределено);
		Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		Для Итер = 1 По Результат.МаксКоличествоСубконто Цикл
			Если Результат.ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") И Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто Тогда
				ВидСубконто = "ВидСубконто" + ВидДвижения + Итер;				
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип", ВидСубконто, ВидСубконто, Неопределено);
				Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
				Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			КонецЕсли;
			Субконто 	= "Субконто" + ВидДвижения + Итер;
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип", Субконто, Субконто, Неопределено);
			Результат.Реквизиты.ГруппыРеквизитовМассив[Счет].Добавить(ЭлемОписание);
			Результат.Реквизиты.ГруппыРеквизитовСтруктура[Счет].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЦикла;
	КонецЦикла;
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрБухгалтерииНеКорр(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Результат.Реквизиты.Имена.Добавить("СтандартныеРеквизиты");
	Результат.Реквизиты.Имена.Добавить("Измерения");
	Результат.Реквизиты.Имена.Добавить("Счет");
	Результат.Реквизиты.Имена.Добавить("Ресурсы");
	Результат.Реквизиты.Имена.Добавить("Реквизиты");
		
	Для Каждого ИмяКоллекции Из Результат.Реквизиты.Имена Цикл
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Период,Регистратор,НомерСтроки", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ВидДвижения,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "Счет", "Счет", Неопределено);
	Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
	Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	
	Для Итер = 1 По Результат.МаксКоличествоСубконто Цикл
		Если Результат.ДополнительныеПараметры.Свойство("ЗаполнятьВидСубконто") И Результат.ДополнительныеПараметры.ЗаполнятьВидСубконто Тогда
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "ВидСубконто" + Итер, "ВидСубконто" + Итер, Неопределено);
			Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
			Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЕсли;
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип", "Субконто" + Итер, "Субконто" + Итер, Неопределено);
		Результат.Реквизиты.ГруппыРеквизитовМассив["Счет"].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура["Счет"].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,Период,НомерСтроки,ВидДвижения");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_РегистрРасчета(Результат, ОМ)
	
	Результат.Вставить("ПодчинениеРегистратору", Истина);
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПериодРегистрации,Регистратор,НомерСтроки,ВидРасчета,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "БазовыйПериодНачало,БазовыйПериодКонец,Сторно,Активность");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Измерения");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Ресурсы");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	Результат.СтдРекНЗ = ОтобратьКоллекцию(Результат, "Активность,ПериодРегистрации,НомерСтроки,ВидРасчета,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец,БазовыйПериодНачало,БазовыйПериодКонец,Сторно");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_БизнесПроцесс(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "Номер,Дата,Стартован,Завершен,ВедущаяЗадача", Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_Задача(Результат, ОМ)
	
	Для Каждого ИмяКоллекции Из СтрРазделить("СтандартныеРеквизиты,Реквизиты,РеквизитыАдресации", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	СтрокаРеквизитов = "";
	Если ОМ.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеЗадачи.ВВидеНомера Тогда
		СтрокаРеквизитов = "Номер,Наименование"; 
	Иначе
		СтрокаРеквизитов = "Наименование,Номер";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ",Дата,Выполнена,БизнесПроцесс,ТочкаМаршрута";
	
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", СтрокаРеквизитов, Истина);
	ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, "СтандартныеРеквизиты", "ПометкаУдаления,Ссылка");
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Реквизиты");
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "РеквизитыАдресации");
	
	ЗаполнитьРеквизитыТЧ(Результат, ОМ);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ВнешнийИсточникДанныхТаблица(Результат, ОМ)
	
	Результат.Вставить("ТипДанныхТаблицы", Строка(ОМ.ТипДанныхТаблицы));
	
	ИмяКоллекции = "СтандартныеРеквизиты";
	Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
	Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	Если ОМ.ТипДанныхТаблицы = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные Тогда	
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Ссылка", "Ссылка", Неопределено, Ложь);
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип,ЭтоШапка", "Ссылка", "Ссылка", Неопределено, Ложь);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЕсли;
	
	Для Каждого ИмяКоллекции Из СтрРазделить("Поля", ",") Цикл
		Результат.Реквизиты.Имена.Добавить(ИмяКоллекции);
		Результат.Реквизиты.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.Реквизиты.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	КонецЦикла;
	
	ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, "Поля");
	
	МассивСтрок = СтрРазделить(Результат.ИмяЕдч, ".");
	
	Если ОМ.ТипДанныхТаблицы = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные Тогда
		Результат.Вставить("ВыражениеТипаОбъект", "ВнешнийИсточникДанныхТаблицаОбъект." + МассивСтрок[1] + "." + Результат.Имя);
		Результат.Вставить("ВыражениеТипаСсылка", "ВнешнийИсточникДанныхТаблицаСсылка." + МассивСтрок[1] + "." + Результат.Имя);
	Иначе
		Результат.Вставить("ВыражениеТипаОбъект", "ВнешнийИсточникДанныхТаблицаМенеджерЗаписи." + МассивСтрок[1] + "." + Результат.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_СтандартныеРеквизиты(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов, ЭтоШапка = Ложь)
	
	ТекКоллекция = ОМ["СтандартныеРеквизиты"];
	
	СтандартныеРеквизиты = Новый Структура();
	Для Каждого Реквизит Из ТекКоллекция Цикл
		СтандартныеРеквизиты.Вставить(Реквизит.Имя);
	КонецЦикла;

	Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаРеквизитов, ",") Цикл
		Если Не СтандартныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Реквизит = ТекКоллекция[ИмяРеквизита];
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		ЭлемОписание.Вставить("ЭтоШапка", ЭтоШапка);
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОМ_ОбычнаяКоллекция(Результат, ОМ, ИмяКоллекции)
	
	ТекКоллекция = ОМ[ИмяКоллекции];
	Для Каждого Реквизит Из ТекКоллекция Цикл      
		ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
		ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
		Если ЭлемОписание.Тип = Неопределено Тогда // ЖурналДокументов.Графы
			ЭлемОписание.Тип = Новый ОписаниеТипов();
		Иначе
			Если ЭлемОписание.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				ЭлемОписание.Вставить("ЭтоХранилищеЗначения", Истина);
			ИначеЕсли ЭлемОписание.Тип.СодержитТип(Тип("Строка")) И Реквизит.МногострочныйРежим = Истина Тогда
				ЭлемОписание.Вставить("МногострочныйРежим", Истина);
			КонецЕсли;
		КонецЕсли;
		Результат.Реквизиты.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
		Результат.Реквизиты.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСТЧ(Результат, ОМ, ИмяКоллекции, СтрокаРеквизитов)
	
	ОМТЧ = ОМ.СтандартныеТабличныеЧасти[ИмяКоллекции];
	Результат.ТЧ.Имена.Добавить(ИмяКоллекции);
	Результат.ТЧ.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
	Результат.ТЧ.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
	
	СтандартныеРеквизиты = Новый Структура();
	Для Каждого Реквизит Из ОМТЧ.СтандартныеРеквизиты Цикл
		СтандартныеРеквизиты.Вставить(Реквизит.Имя, Реквизит);
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаРеквизитов, ",") Цикл
		Если СтандартныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Реквизит = ОМТЧ.СтандартныеРеквизиты[ИмяРеквизита];
			ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
			ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
			Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
			Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТЧ(Результат, ОМ)
	
	Для Каждого ОМТЧ Из ОМ.ТабличныеЧасти Цикл
		ИмяКоллекции = ОМТЧ.Имя;
		Результат.ТЧ.Имена.Добавить(ИмяКоллекции);
		Результат.ТЧ.ГруппыРеквизитовМассив.Вставить(ИмяКоллекции, Новый Массив());
		Результат.ТЧ.ГруппыРеквизитовСтруктура.Вставить(ИмяКоллекции, Новый Структура());
		Для Каждого ИмяГруппыРеквизитов Из СтрРазделить("СтандартныеРеквизиты,Реквизиты", ",") Цикл
			Для Каждого Реквизит Из ОМТЧ[ИмяГруппыРеквизитов] Цикл
				ЭлемОписание = Новый Структура("Имя,Синоним,Тип");
				ЗаполнитьЗначенияСвойств(ЭлемОписание, Реквизит);
				Если ЭлемОписание.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
					ЭлемОписание.Вставить("ЭтоХранилищеЗначения", Истина);
				ИначеЕсли ЭлемОписание.Тип.СодержитТип(Тип("Строка")) И Реквизит.МногострочныйРежим = Истина Тогда
					ЭлемОписание.Вставить("МногострочныйРежим", Истина);
				КонецЕсли;
				Результат.ТЧ.ГруппыРеквизитовМассив[ИмяКоллекции].Добавить(ЭлемОписание);
				Результат.ТЧ.ГруппыРеквизитовСтруктура[ИмяКоллекции].Вставить(ЭлемОписание.Имя, ЭлемОписание);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Функция ОтобратьКоллекцию(Результат, СтрокаРеквизитов)
	
	Источник = Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты;
	
	Приемник = Новый Массив();
	Для Каждого Элем Из Новый Структура(СтрокаРеквизитов) Цикл
		Если Источник.Свойство(Элем.Ключ) Тогда
			Реквизит = Источник[Элем.Ключ];
			Приемник.Добавить(Новый Структура("Имя,Синоним,Тип", Реквизит.Имя, Реквизит.Синоним, Реквизит.Тип));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

Функция КлючЗаписи(Результат)
	
	Структ = Новый Структура();
	Если Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты.Свойство("Период") Тогда
		Структ.Вставить("Период");
	КонецЕсли;
	Если Результат.Реквизиты.ГруппыРеквизитовСтруктура.СтандартныеРеквизиты.Свойство("Регистратор") Тогда
		Структ.Вставить("Регистратор");
	КонецЕсли;
	Для Каждого ЭлемОписание Из Результат.Реквизиты.ГруппыРеквизитовМассив.Измерения Цикл
		Структ.Вставить(ЭлемОписание.Имя);
	КонецЦикла;
	
	Возврат Структ;
	
КонецФункции

Функция КоллекцияМетаданных() Экспорт
	
	Коллекция = Новый Массив();
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыОбмена";
	Элем.ИмяЕдч 	= "ПланОбмена";
	Элем.Картинка 	= "ПланОбмена";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Константы";
	Элем.ИмяЕдч 	= "Константа";
	Элем.Картинка 	= "Константа";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Справочники";
	Элем.ИмяЕдч 	= "Справочник";
	Элем.Картинка 	= "Справочник";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Документы";
	Элем.ИмяЕдч 	= "Документ";
	Элем.Картинка 	= "Документ";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем); 
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ЖурналыДокументов";
	Элем.ИмяЕдч 	= "ЖурналДокументов";
	Элем.Картинка 	= "ЖурналДокументов";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Перечисления";
	Элем.ИмяЕдч 	= "Перечисление";
	Элем.Картинка 	= "Перечисление";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Отчеты";
	Элем.ИмяЕдч 	= "Отчет";
	Элем.Картинка 	= "Отчет";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Обработки";
	Элем.ИмяЕдч 	= "Обработка";
	Элем.Картинка 	= "Обработка";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыВидовХарактеристик";
	Элем.ИмяЕдч 	= "ПланВидовХарактеристик";
	Элем.Картинка 	= "ПланВидовХарактеристик";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыСчетов";
	Элем.ИмяЕдч 	= "ПланСчетов";
	Элем.Картинка 	= "ПланСчетов";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ПланыВидовРасчета";
	Элем.ИмяЕдч 	= "ПланВидовРасчета";
	Элем.Картинка 	= "ПланВидовРасчета";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыСведений";
	Элем.ИмяЕдч 	= "РегистрСведений";
	Элем.Картинка 	= "РегистрСведений";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыНакопления";
	Элем.ИмяЕдч 	= "РегистрНакопления";
	Элем.Картинка 	= "РегистрНакопления";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыБухгалтерии";
	Элем.ИмяЕдч 	= "РегистрБухгалтерии";
	Элем.Картинка 	= "РегистрБухгалтерии";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "РегистрыРасчета";
	Элем.ИмяЕдч 	= "РегистрРасчета";
	Элем.Картинка 	= "РегистрРасчета";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "БизнесПроцессы";
	Элем.ИмяЕдч 	= "БизнесПроцесс";
	Элем.Картинка 	= "БизнесПроцесс";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "Задачи";
	Элем.ИмяЕдч 	= "Задача";
	Элем.Картинка 	= "Задача";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Элем = Новый Структура("ИмяМнч,ИмяЕдч,Картинка,Свойства");
	Элем.ИмяМнч 	= "ВнешниеИсточникиДанных";
	Элем.ИмяЕдч 	= "ВнешнийИсточникДанных";
	Элем.Картинка 	= "ВнешнийИсточникДанных";
	Элем.Свойства 	= "";
	Коллекция.Добавить(Элем);
	
	Возврат Коллекция;
	
КонецФункции

Функция ИнформацияОТипеМетаданныхПоСсылке(Знач Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	ИмяЕдч = СтрРазделить(ПолноеИмя, ".")[0];
	
	КоллекцияМетаданных = КоллекцияМетаданных();
	
	ИскомаяСтрока = Неопределено;
	Для Каждого Элем Из КоллекцияМетаданных Цикл
		Если Элем.ИмяЕдч = ИмяЕдч Тогда
			ИскомаяСтрока = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним", ИскомаяСтрока.ИмяМнч, ИскомаяСтрока.ИмяЕдч, МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицыРегистратора(Знач ИмяДокумента) Экспорт
	
	Результат = Новый Массив();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИмяМнч");
	ТЗ.Колонки.Добавить("ИмяЕдч");
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Синоним");
	
	Для Каждого СтруктураТипаРегистра Из ТипыРегистров() Цикл
		КОМ = Метаданные[СтруктураТипаРегистра["ИмяМнч"]];
		ТЗ.Очистить();
		Для Каждого ОМ Из Метаданные.Документы[ИмяДокумента].Движения Цикл		
			Если КОМ.Содержит(ОМ) Тогда
				НовСтр = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтруктураТипаРегистра);
				НовСтр.Имя = ОМ.Имя;
				НовСтр.Синоним = ОМ.Синоним;			
			КонецЕсли;
		КонецЦикла;   
		ТЗ.Сортировать("Имя");
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			СтруктураРегистра = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним");
			ЗаполнитьЗначенияСвойств(СтруктураРегистра, СтрокаТЗ);
			Результат.Добавить(СтруктураРегистра);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыРегистров()
	
	Результат = Новый Массив();
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрСведений", 	"РегистрыСведений"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрНакопления", 	"РегистрыНакопления"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрРасчета", 		"РегистрыРасчета"));
	Результат.Добавить(Новый Структура("ИмяЕдч,ИмяМнч", "РегистрБухгалтерии", 	"РегистрыБухгалтерии"));
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоUUID(Знач Описание, Знач ReqUUID) Экспорт

	Менеджер = МенеджерПоИмени(Описание.ИмяМнч);
	Ссылка = Менеджер[Описание.Имя].ПолучитьСсылку(ReqUUID);
	ЕстьСсылка = ЕстьСсылка(Описание, Ссылка);	
	
	Возврат Новый Структура("Ссылка,ЕстьСсылка", Ссылка, ЕстьСсылка);
	
КонецФункции

Функция НайтиПоURL(Знач ReqURL) Экспорт
	
	//+from factcode.im
	ПерваяТочка = Найти(ReqURL, "e1cib/data/");
    ВтораяТочка = Найти(ReqURL, "?ref=");    
    ПредставлениеТипа   = Сред(ReqURL, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(ReqURL, ВтораяТочка + 5));
    Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	//-from factcode.im
	
	Описание = ОписаниеОбъектаМетаданных(ТипЗнч(Ссылка));	
	ЕстьСсылка = ЕстьСсылка(Описание, Ссылка);	
	
	Возврат Новый Структура("Ссылка,ЕстьСсылка,Описание", Ссылка, ЕстьСсылка, Описание);
	
КонецФункции

// Только некоторые
Функция МенеджерПоИмени(Знач Имя) Экспорт
	
	Результат = Неопределено;
	Если СтрНачинаетсяС(Имя, "ПланыОбмена") Тогда
		Результат = ПланыОбмена;
	ИначеЕсли СтрНачинаетсяС(Имя, "Справочники") Тогда
		Результат = Справочники;
	ИначеЕсли СтрНачинаетсяС(Имя, "Документы") Тогда
		Результат = Документы;
	ИначеЕсли СтрНачинаетсяС(Имя, "Перечисления") Тогда
		Результат = Перечисления;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыВидовХарактеристик") Тогда
		Результат = ПланыВидовХарактеристик;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыСчетов") Тогда
		Результат = ПланыСчетов;
	ИначеЕсли СтрНачинаетсяС(Имя, "ПланыВидовРасчета") Тогда
		Результат = ПланыВидовРасчета;
	ИначеЕсли СтрНачинаетсяС(Имя, "БизнесПроцессы") Тогда
		Результат = БизнесПроцессы;
	ИначеЕсли СтрНачинаетсяС(Имя, "Задачи") Тогда
		Результат = Задачи;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьСсылка(Знач Описание, Знач Ссылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	" + Описание.ИмяЕдч + "." + Описание.Имя + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли


