#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ПолноеИмяФайла.АвтоМаксимальнаяШирина        		= Ложь;
	Элементы.ДеревоЗапросов.АвтоВводНовойСтроки 				= Ложь;
	Элементы.ДеревоЗапросовИсключение.ТолькоПросмотр 			= Истина;
	Элементы.ПараметрыЗапроса.АвтоВводНовойСтроки 				= Ложь;
	Элементы.ПараметрыЗапросаТипЗначения.РедактированиеТекста 	= Ложь; 
	Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора	 			= Истина;
	Элементы.ПараметрыЗапросаЗначение.ВыборГруппИЭлементов 	= ГруппыИЭлементы.ГруппыИЭлементы;
	Элементы.ПараметрыЗапросаФлагСЗ.ТолькоПросмотр				= Истина;
	Элементы.ПараметрыЗапросаФлагГраница.ТолькоПросмотр			= Истина;
	Элементы.ПараметрыЗапросаФлагКод.ТолькоПросмотр				= Истина;
	Элементы.ВремТаблицыЗначение.РедактированиеТекста 			= Ложь;
	Элементы.ВремТаблицыЗначение.КнопкаВыбора	 				= Истина;
	Элементы.ВремТаблицыИспользуемаяВТ.КнопкаВыбора	 			= Истина;
	Элементы.ИспользуемыеЗапросыНаименование.ТолькоПросмотр 	= Истина;
	Элементы.ИспользуемыеЗапросыИдСтроки.ТолькоПросмотр 		= Истина;
	Элементы.ИспользуемыеЗапросыРасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	
	Элементы.ГруппаПараметрыВТ.ПутьКДаннымЗаголовка = "КоличествоПараметровВТ";
	Элементы.ГруппаЗапрос.ПутьКДаннымЗаголовка = "КоличествоМВТ";
	Элементы.ГруппаРезультат.ПутьКДаннымЗаголовка = "КоличествоТаблиц";
	Элементы.ГруппаИнструкция.ПутьКДаннымЗаголовка = "КоличествоИнструкция";

	ЭтотОбъект.ОписаниеТиповДокумент 		= Документы.ТипВсеСсылки();
	ЭтотОбъект.ОписаниеТиповСписокЗначений 	= Новый ОписаниеТипов("СписокЗначений");
	ЭтотОбъект.ОписаниеТиповСтрока 			= Новый ОписаниеТипов("Строка");
	
	ЭтотОбъект.НастройкаМаксКоличествоСтрок 	= 100;
	ЭтотОбъект.НастройкаМаксШиринаКолонок		= 60;
	ЭтотОбъект.НастройкаПереноситьТекст     	= Истина;
	ЭтотОбъект.НастройкаВыделятьОтрицательные 	= Истина;
	ЭтотОбъект.НастройкаСохранятьРезультаты = Истина;
	
	Для Каждого Наим Из СтрРазделить("РасчетЯчеекКоличество,РасчетЯчеекСумма", ",") Цикл
		Элементы[Наим].КнопкаВыбора = Ложь;
		Элементы[Наим].ТолькоПросмотр = Истина;
		Элементы[Наим].Ширина = 10;
		Элементы[Наим].РастягиватьПоГоризонтали = Ложь;
	КонецЦикла;
	
	Элементы.ТегЗапроса.Ширина = 30;
	Элементы.ТегЗапроса.РастягиватьПоГоризонтали = Ложь;
	Элементы.ДекорацияСтатусЧтенияЛога.АвтоМаксимальнаяШирина = Ложь;
	
	ЭтотОбъект.ПеременныеОкружения = Новый Структура();
	ЭтотОбъект.ПеременныеОкружения.Вставить("БезопасныйРежим", БезопасныйРежим());
	ЭтотОбъект.ПеременныеОкружения.Вставить("ЭтоКлиентСервер", СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 0);
	ЭтотОбъект.ПеременныеОкружения.Вставить("ЕстьРасширение", Метаданные.ОбщиеМодули.Найти("bm_Запросы") <> Неопределено);
	ЭтотОбъект.ПеременныеОкружения.Вставить("ЕстьДлительныеОперации", Метаданные.ОбщиеМодули.Найти("ДлительныеОперации") <> Неопределено);
	
	Элементы.ДеревоЗапросовЗагрузитьИзРегистра.Видимость = (Метаданные.РегистрыСведений.Найти("bm_Запросы") <> Неопределено);
	Элементы.ФормаПодключитьКонсольЗапросов.Видимость = Не ЭтотОбъект.ПеременныеОкружения.ЕстьРасширение;
	
	//+ДеревоФункций	
	Элементы.ДеревоФункций.ТолькоПросмотр = Истина;
	Элементы.ДеревоФункций.ИзменятьПорядокСтрок = Ложь;
	Элементы.ДеревоФункций.ИзменятьСоставСтрок = Ложь;
	Элементы.ДеревоФункций.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.КоманднаяПанель;
	Элементы.ДеревоФункций.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.КоманднаяПанель;	
	ДеревоФункций_Заполнить();
	//-ДеревоФункций
	
	Если Параметры.Свойство("ТекстЗапроса") Тогда
		
		НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
		НовСтр.ИдСтроки 		= Строка(Новый УникальныйИдентификатор());
		НовСтр.Наименование 	= "Новый запрос";
	
		ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;
		
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Параметры.ТекстЗапроса);
		
		Если Параметры.Свойство("ПараметрыЗапроса") Тогда
			ЭтотОбъект.ПараметрыЗапроса.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ПараметрыЗапроса));
		КонецЕсли;
		Если Параметры.Свойство("ВремТаблицы") Тогда
			ЭтотОбъект.ВремТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ВремТаблицы));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПустаяСтрока(ЭтотОбъект.ТекстЗапроса.ПолучитьТекст()) Тогда
	
		Если Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
			КонсольЗапросов_ИнициализацияСуществующийФайл();
		ИначеЕсли ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда // new
			КонсольЗапросов_ИнициализацияНовыйФайл();
		КонецЕсли;
		
	Иначе
		
		ЭтотОбъект.ПолноеИмяФайла = "";
	
	КонецЕсли;
	
	Если ЭтотОбъект.НастройкаРаботаСТЖ Тогда
		КонсольЗапросов_ПрочитатьКонфигурациюТЖ();
		КонсольЗапросов_ПроверитьРаботуСТЖ();
	КонецЕсли;
	
	УпрФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			Форма_ВыполнитьКомандуСПроверкойНаСохранение("ЗакрытьФорму");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпискаФайлов" Тогда
		АдресВоВременномХранилище = Параметр.АдресСписокФайлов;
		Форма_ВременноеХранилищеВТаблицуЗначений("СписокФайлов", АдресВоВременномХранилище);
	ИначеЕсли ИмяСобытия = "ФормаСхемаЗапросаПриОткрытии" Тогда
		Форма_УстановитьДоступность(Ложь);
	ИначеЕсли ИмяСобытия = "ФормаСхемаЗапросаВыполнитьТекущийЗапрос" Тогда
		ЭтотОбъект.СтруктураОткрытияЗапроса.ПереданЗапрос = Истина;
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Параметр);
		ВыполнитьЗапросПакетНаСервере(Новый Структура("ЭтоПакет", Истина));
		КонсольЗапросов_ПослеПолученияРезультата();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

#Область ДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДеревоЗапросов_ВыбратьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоЗапросовПриАктивизацииСтроки_ОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// prevent F9
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПослеУдаления(Элемент)
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		НоваяСтрокаТекущегоУровня(Команды.НоваяСтрокаТекущегоУровня);
	ИначеЕсли ТекДанные.Идентификатор <> ЭтотОбъект.ТекущийИдентификатор Тогда
		ЭтотОбъект.ТекущийИдентификатор = ТекДанные.Идентификатор;	
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаКлиенте
Процедура ПараметрыЗапросаПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПараметрыЗапросаЗначение" Тогда
		Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
			Элемент.ТекущийЭлемент.РедактированиеТекста = Ложь;
		Иначе
			Элемент.ТекущийЭлемент.РедактированиеТекста = Истина;
		КонецЕсли;
		ТипыЗначений_УстановитьОграничениеТипа(Элемент.ТекущийЭлемент, ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекДанные.ТипЗначения 	= Новый ОписаниеТипов();
		ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПослеУдаления(Элемент)
	
	ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура("ПодборТипа, БыстрыйВыбор, ТипЗначения", Истина, Ложь, ТекДанные.ТипЗначения);
	ОткрытьФорму(ИмяФормыОбработки("ВыборТипаЗначения"), ПараметрыОткрытия, Элемент, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипЗначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ТипЗначения = ВыбранноеЗначение;
	ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные);
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Адрес, ТипТаблицы, ИмяТаблицы", ТекДанные.Значение, "ТЗ", ТекДанные.Имя);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторТЗ"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);
	ИначеЕсли ТекДанные.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("УИД", ТекДанные.Значение);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторУИД"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = Форма_ПоместитьДанныеВоВременноеХранилищеФормы(ВыбранноеЗначение);
	ИначеЕсли ТекДанные.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = ВыбранноеЗначение;		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаСЗ(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = Не ТекДанные.ФлагСЗ;
	
	Если Флаг Тогда
		Если ТекДанные.ФлагГраница Тогда
			Сообщить("Установлен флаг Граница");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекДанные.ФлагСЗ = Флаг;
	
	ТекЗначение = ТекДанные.Значение;
	Если Флаг Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СписокЗначений");		
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповСписокЗначений.ПривестиЗначение(ТекДанные.Значение);
		Если (ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент")) > 0
			Или ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ТекДанные.Значение.ТипЗначения = ЭтотОбъект.ОписаниеТиповДокумент;
		Иначе
			ТекДанные.Значение.ТипЗначения = ТекДанные.ТипЗначения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.Значение) И ЗначениеЗаполнено(ТекЗначение) И ТекДанные.Значение.НайтиПоЗначению(ТекЗначение) = Неопределено Тогда
			ТекДанные.Значение.Добавить(ТекЗначение);
		КонецЕсли;
	Иначе
		ТекДанные.Значение = ТекДанные.ТипЗначения.ПривестиЗначение(ТекДанные.Значение);
		Если ТипЗнч(ТекЗначение) = Тип("СписокЗначений") И ТекЗначение.Количество() > 0 Тогда
			ТекДанные.Значение = ТекЗначение.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПараметрыЗапроса.ТекущийЭлемент.Имя = "ПараметрыЗапросаЗначение" Тогда
		ТипыЗначений_УстановитьОграничениеТипа(Элементы.ПараметрыЗапроса.ТекущийЭлемент, ТекДанные);
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаГраница(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекДанные.ТипЗначения.СодержитТип(Тип("Дата")) Или ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени"))) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ФлагСЗ Тогда
		Сообщить("Установлен флаг СЗ");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФлагГраница, ВидГраницы", ТекДанные.ФлагГраница, ТекДанные.ВидГраницы);
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗапросаГраница_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("Граница"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаГраница_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ФлагГраница = Не ПустаяСтрока(Результат);
	ТекДанные.ВидГраницы = Результат;
	
	ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные);
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКод(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФлагКод, ВидКода, Код", ТекДанные.ФлагКод, ТекДанные.ВидКода, ТекДанные.Код);
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗапросаКод_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("ПрограммныйКод"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКод_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ФлагКод = Не ПустаяСтрока(Результат.Код);
	ТекДанные.ВидКода = Результат.ВидКода;
	ТекДанные.Код = Результат.Код;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВремТаблицы

&НаКлиенте
Процедура ВремТаблицыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекДанные.ТипЗначения 	= "Таблица значений";
		ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Адрес, ТипТаблицы, ИмяТаблицы", ТекДанные.Значение, "Врем", ТекДанные.Имя);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторТЗ"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = Форма_ПоместитьДанныеВоВременноеХранилищеФормы(ВыбранноеЗначение);		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыИспользуемаяВТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму(ИмяФормыОбработки("ВыборВТ"), , Элемент, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыИспользуемаяВТОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекДанные.Имя) Тогда
		ТекДанные.Имя = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИспользуемыеЗапросы

&НаКлиенте
Процедура ИспользуемыеЗапросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	АдресВХ = ДеревоЗапросов_ПоместитьВХДеревоВыбораЗапроса();
	ОткрытьФорму(ИмяФормыОбработки("ВыборЗапроса"), Новый Структура("АдресВХ", АдресВХ), Элементы.ИспользуемыеЗапросы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеЗапросыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЭтотОбъект.КоличествоМВТ = ЭтотОбъект.ИспользуемыеЗапросы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеЗапросыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.ИспользуемыеЗапросы.НайтиСтроки(Новый Структура("ИдСтроки", ВыбранноеЗначение.ИдСтроки));
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ЭтотОбъект.ТекущийИдентификатор);
	Если ТекДанные.ИдСтроки = ВыбранноеЗначение.ИдСтроки Тогда
		Возврат;
	КонецЕсли;
	
	НовСтр = ЭтотОбъект.ИспользуемыеЗапросы.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, ВыбранноеЗначение);
	НовСтр.Использовать = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеЗапросыПослеУдаления(Элемент)
	
	ЭтотОбъект.КоличествоМВТ = ЭтотОбъект.ИспользуемыеЗапросы.Количество();
	
КонецПроцедуры

#КонецОбласти
 
#Область РезультатТабличныйДокумент

&НаКлиенте
Процедура РезультатТабличныйДокументПриАктивизации(Элемент)
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоФункций

&НаКлиенте
Процедура ДеревоФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗапросТаблицы(Команды.ЗапросТаблицы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура НовыйФайл(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайлов(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	КонсольЗапросов_СохранитьФайлНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлКак(Команда)
	
	КонсольЗапросов_СохранитьФайлНаКлиенте(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если ЭтотОбъект.ТекущийИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ЭтотОбъект.ТекущийИдентификатор;
	
	ЭтоПакет = (Команда.Имя = "ВыполнитьПакет");
	ТекПараметрыВызова = Новый Структура("ЭтоПакет", ЭтоПакет);
	
	КонсольЗапросов_ОчиститьЛог(ЭтотОбъект);
	
	ПроверитьСхемуЗапросаНаСервере();
	
	Если ЭтотОбъект.НастройкаВыполнятьВФоне И ЭтотОбъект.ПеременныеОкружения.ЕстьРасширение И ЭтотОбъект.ПеременныеОкружения.ЕстьДлительныеОперации Тогда
		ОМ_ДлительныеОперацииКлиент = Вычислить("ДлительныеОперацииКлиент");
		ЭтотОбъект.ДлительнаяОперация = ВыполнитьДлительнуюПроцедуруНаСервере(ТекПараметрыВызова);                                                                 
		ОписаниеОповещения = Новый ОписаниеОповещения("ДлительнаяПроцедура_Завершение", ЭтотОбъект);
		ПараметрыОжидания = ОМ_ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОМ_ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);	
	Иначе     
		ВыполнитьЗапросПакетНаСервере(ТекПараметрыВызова);
		КонсольЗапросов_ПослеПолученияРезультата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьДлительнуюПроцедуруНаСервере(Знач ТекПараметрыВызова)
	
	ОМ_ДлительныеОперации = Вычислить("ДлительныеОперации");
	
	Если ЭтотОбъект.РезультатВХранилище = "" Тогда
		ЭтотОбъект.РезультатВХранилище = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыВызова = КонсольЗапросов_ПараметрыВызова(ТекПараметрыВызова);
	ПараметрыВызова.Вставить("ФоновоеЗадание");

	ПараметрыВыполнения = ОМ_ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.АдресРезультата = РезультатВХранилище;
	
	Результат = ОМ_ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "bm_Запросы.ВыполнитьЗапросПакет", ПараметрыВызова, ЭтотОбъект.РезультатВХранилище);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыОткрытия = Новый Структура(КонсольЗапросов_СтрокаНастроек());
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("Настройки_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("Настройки"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонсольЗапросов_ПроверитьРаботуСТЖ();
		УпрФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяСтрокаТекущегоУровня(Команда)
	
	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекДанные.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
		Иначе
			ДФКЭД = ТекРодитель.ПолучитьЭлементы();
		КонецЕсли;
	КонецЕсли;
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = "Новый запрос";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяСтрокаПодчиненногоУровня(Команда)
	
 	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДФКЭД = ТекДанные.ПолучитьЭлементы();
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = "Новый запрос";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	
	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = ТекДанные.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ДФКЭД = ТекРодитель.ПолучитьЭлементы();
	КонецЕсли;
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = ТекДанные.Наименование + " (копия)";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор, ТекДанные.Идентификатор);	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗапрос(Команда)
	
	ДеревоЗапросов_ВыбратьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВХ(Команда)
	
	Значение = "";
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзВХ_Завершение", ЭтотОбъект, Новый Структура());
	ПоказатьВводЗначения(Оповещение, Значение, , Тип("Строка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВХ_Завершение(АдресВХ, ДополнительныеПараметры) Экспорт

	Если АдресВХ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонсольЗапросов_ЗагрузитьИзВХ(АдресВХ);
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзРегистра(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзРегистра_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму("РегистрСведений.bm_Запросы.Форма.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзРегистра_Завершение(КлючЗаписи, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.bm_Запросы") Тогда
		КонсольЗапросов_ЗагрузитьИзРегистра(КлючЗаписи);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапрос(Команда)

	Диалог = Форма_НовыйДиалогОткрытия();
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗапрос_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапрос_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда		
			ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);		
			Файл = Новый Файл(ВыбранныеФайлы[0]);
			Если Файл.Расширение = ".bmqval" Тогда
				КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Файл.ПолноеИмя, Ложь);
			ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
				КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Файл.ПолноеИмя, Ложь);
			КонецЕсли;			
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗапрос(Команда)
		
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ЭтотОбъект.ТекущийИдентификатор);
	Диалог = Форма_НовыйДиалогСохранения(Строка.Наименование);
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьЗапрос_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗапрос_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда			
			Файл = Новый Файл(ВыбранныеФайлы[0]);
			Если Файл.Расширение = ".bmqval" Тогда
				КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Файл.ПолноеИмя, ЭтотОбъект.ТекущийИдентификатор);
			ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
				КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Файл.ПолноеИмя, ЭтотОбъект.ТекущийИдентификатор);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	Текст = СокрЛП(ТекстЗапроса.ПолучитьТекст());
	Если Не ПустаяСтрока(Текст) Тогда
		РезультатПроверки = КонсольЗапросов_ПроверитьТекстЗапроса(Текст);
		Если Не РезультатПроверки.Результат Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Форма_УстановитьДоступность(Ложь);
	
	КонструкторЗапроса = Новый КонструкторЗапроса(Текст);
	Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторЗапроса_Завершение", ЭтотОбъект, Новый Структура());
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса_Завершение(Текст, ДополнительныеПараметры) Экспорт
	
	Форма_УстановитьДоступность(Истина);
	
	Если Текст <> Неопределено Тогда
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Текст);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуЗапроса(Команда)

	Текст = СокрЛП(ТекстЗапроса.ПолучитьТекст());
	Если Не ПустаяСтрока(Текст) Тогда
		РезультатПроверки = КонсольЗапросов_ПроверитьТекстЗапроса(Текст);
		Если Не РезультатПроверки.Результат Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ЭтотОбъект.СтруктураОткрытияЗапроса = Новый Структура("ТекстЗапроса, ПереданЗапрос", Текст, Ложь);
	
	ПараметрыОткрытия = Новый Структура("ТекстЗапроса", Текст);
	Оповещение = Новый ОписаниеОповещения("ОткрытьСхемуЗапроса_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("СхемаЗапроса"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуЗапроса_Завершение(Текст, ДополнительныеПараметры) Экспорт
	
	Форма_УстановитьДоступность(Истина);
	
	Если Текст = Неопределено Тогда
		Если ЭтотОбъект.СтруктураОткрытияЗапроса.ПереданЗапрос Тогда
			ЭтотОбъект.ТекстЗапроса.УстановитьТекст(ЭтотОбъект.СтруктураОткрытияЗапроса.ТекстЗапроса);
		КонецЕсли;
	Иначе
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Текст);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛистинг(Команда)
	
	ПараметрыОткрытия = Новый Структура("Текст", ЭтотОбъект.ТекстЗапроса.ПолучитьТекст());
	ОткрытьФорму(ИмяФормыОбработки("Листинг"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыВТ(Команда)
	
	Попытка
		ЗаполнитьПараметрыВТНаСервере();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНеиспользуемыеПараметрыВТ(Команда)
	
	Попытка
		ОчиститьНеиспользуемыеПараметрыВТНаСервере();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИнструкций(Команда)

	ОткрытьФорму(ИмяФормыОбработки("ШаблоныИнструкций"), , ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИнструкцию(Команда)
	
	Текст = ЭтотОбъект.ПрограммныйКод.ПолучитьТекст();
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	КонсольЗапросов_ОчиститьЛог(ЭтотОбъект);
	
	ВыполнитьИнструкциюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатВФорму(Команда)
	
	Перем ПараметрыОбласти;
	
	ТолькоВыделеннуюОбласть = СтрНайти(Команда.Имя, "ВыделеннуюОбласть") > 0;
	ФормаОбработки = СтрНайти(Команда.Имя, "ФормаОбработки") > 0;
	
	Если ТолькоВыделеннуюОбласть Тогда
		ВыделеннаяОбласть = ЭтотОбъект.РезультатТабличныйДокумент.ВыделенныеОбласти[0];
		ПараметрыОбласти = Новый Структура("Верх,Лево,Низ,Право");
		ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ВыделеннаяОбласть);
	КонецЕсли;                                                        
	
	ТабДок = КонсольЗапросов_ТекущийТабличныйДокумент(ПараметрыОбласти);
	
	Если ФормаОбработки Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(ТабДок);
		ПараметрыОткрытия = Новый Структура("АдресВХ", АдресВХ);
		ОткрытьФорму(ИмяФормыОбработки("ФормаТабличногоДокумента"), ПараметрыОткрытия, ЭтотОбъект, Новый УникальныйИдентификатор());
	Иначе     
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетЯчеек(Команда)
	
	Количество = 0;
	Сумма = 0;
	ВыделенныеОбласти = ЭтотОбъект.РезультатТабличныйДокумент.ВыделенныеОбласти;
	
	Для Каждого ВыделеннаяОбластьЯчеек Из ВыделенныеОбласти Цикл
		Для НомерСтроки = ВыделеннаяОбластьЯчеек.Верх По ВыделеннаяОбластьЯчеек.Низ Цикл
			Для НомерКолонки = ВыделеннаяОбластьЯчеек.Лево По ВыделеннаяОбластьЯчеек.Право Цикл
				ОбластьЯчеек = ЭтотОбъект.РезультатТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ТипЗнч(ОбластьЯчеек.Расшифровка) = Тип("Число") Тогда
					Количество = Количество + 1;
					Сумма = Сумма + ОбластьЯчеек.Расшифровка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЭтотОбъект.РасчетЯчеекКоличество = Количество;
	ЭтотОбъект.РасчетЯчеекСумма = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛог(Команда)
	
	Если ПустаяСтрока(ЭтотОбъект.ТегЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	КонсольЗапросов_ПрочитатьЛог();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКонсольЗапросов(Команда)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru = 'bm Консоль запросов|*bm_КонсольЗапросов.epf'");
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Оповещение = Новый ОписаниеОповещения("ПодключитьКонсольЗапросов_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКонсольЗапросов_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда					
			ПутьКФайлу = ВыбранныеФайлы[0];
			АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
			Результат = ПодключитьВнешнююОбработкуКонсольЗапросов(АдресВХ);
			Если Результат = Истина Тогда
				ПоказатьПредупреждение(, "Внешняя обработка подключена");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросТаблицы(Команда)
	
	ТекДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекДанные.ПолучитьРодителя() = Неопределено Или ТекДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	Описание = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним");
	ЗаполнитьЗначенияСвойств(Описание, ТекДанные);
	ПараметрыОткрытия = Новый Структура("Описание", Описание);
	Оповещение = Новый ОписаниеОповещения("ЗапросТаблицы_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("ЗапросТаблицы"), ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросТаблицы_Завершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
 
	НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НовСтр.Наименование = "Новый запрос";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;

	ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Результат);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;
	
	Попытка
		ЗаполнитьПараметрыВТНаСервере();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;
	
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФункцийРазвернутьСтроки(Команда)

	Для Каждого Строка Из ЭтотОбъект.ДеревоФункций.ПолучитьЭлементы() Цикл
		Элементы.ДеревоФункций.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФункцийСвернутьСтроки(Команда)

	Для Каждого Строка Из ЭтотОбъект.ДеревоФункций.ПолучитьЭлементы() Цикл
		Элементы.ДеревоФункций.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыНаСервере

&НаСервере
Процедура ВыполнитьЗапросПакетНаСервере(Знач ТекПараметрыВызова)
	
	Если ЭтотОбъект.РезультатВХранилище = "" Тогда
		ЭтотОбъект.РезультатВХранилище = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
    ПараметрыВызова = КонсольЗапросов_ПараметрыВызова(ТекПараметрыВызова);
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ВыполнитьЗапросПакет(ПараметрыВызова, ЭтотОбъект.РезультатВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВТНаСервере()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	
	Попытка
		ПроверитьСхемуЗапроса(СхемаЗапроса, Текст, Истина);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	ОписаниеПараметровЗапроса 	= Запрос.НайтиПараметры();	
	ПрежняяК_ПараметрыЗапроса 	= ЭтотОбъект.ПараметрыЗапроса.Выгрузить();	
	НоваяК_ПараметрыЗапроса 	= ПрежняяК_ПараметрыЗапроса.СкопироватьКолонки();
	
	Для Каждого Стр Из ОписаниеПараметровЗапроса Цикл
		ИскомаяСтрока = ПрежняяК_ПараметрыЗапроса.Найти(Стр.Имя, "Имя");
		Если ИскомаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = НоваяК_ПараметрыЗапроса.Добавить();
		НовСтр.Имя = Стр.Имя;	
		Если Стр.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			НовСтр.ТипЗначения	= "Таблица значений";
		ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ОписаниеТипов"));
			НовСтр.ТипЗначения	= Новый ОписаниеТипов(МассивТипов);
			НовСтр.Значение 	= НовСтр.ТипЗначения.ПривестиЗначение();
		ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			НовСтр.ТипЗначения	= Стр.ТипЗначения;
			НовСтр.Значение 	= ЭтотОбъект.ОписаниеТиповДокумент.ПривестиЗначение();			
		Иначе
			НовСтр.ТипЗначения	= Стр.ТипЗначения;
			НовСтр.Значение 	= Стр.ТипЗначения.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;
	
	ПрежняяК_ВремТаблицы		= ЭтотОбъект.ВремТаблицы.Выгрузить();	
	НоваяК_ВремТаблицы 			= ПрежняяК_ВремТаблицы.СкопироватьКолонки();
	
	СписокОписанийВТ = Запросы_СписокОписанийВТИзТекстаЗапроса(Запрос.Текст);
	
	Для Каждого ЭлементКоллекции Из СписокОписанийВТ Цикл
		Если Лев(ЭлементКоллекции.Ключ, 1) <> "&" Тогда
			ИскомаяСтрока = ПрежняяК_ВремТаблицы.Найти(ЭлементКоллекции.Ключ, "Имя");
			Если ИскомаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			НовСтр = НоваяК_ВремТаблицы.Добавить();
			НовСтр.Имя			= ЭлементКоллекции.Ключ;
			НовСтр.ТипЗначения 	= "Таблица значений";
			НовСтр.Значение  	= ПоместитьВоВременноеХранилище(ЭлементКоллекции.Значение, ЭтотОбъект.УникальныйИдентификатор);
		Иначе
			Имя = Прав(ЭлементКоллекции.Ключ, СтрДлина(ЭлементКоллекции.Ключ)-1);
			ИскомаяСтрока = ПрежняяК_ПараметрыЗапроса.Найти(Имя, "Имя");
			Если ИскомаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			ИскомаяСтрока = НоваяК_ПараметрыЗапроса.Найти(Имя, "Имя");
			ИскомаяСтрока.Значение = ПоместитьВоВременноеХранилище(ЭлементКоллекции.Значение, ЭтотОбъект.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из НоваяК_ПараметрыЗапроса Цикл
		НовСтр = ЭтотОбъект.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	Для Каждого Стр Из НоваяК_ВремТаблицы Цикл
		НовСтр = ЭтотОбъект.ВремТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;	
	
	Если НоваяК_ПараметрыЗапроса.Количество() > 0 Или НоваяК_ВремТаблицы.Количество() > 0 Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;	
	
	КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеПараметрыВТНаСервере()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	
	Попытка
		ПроверитьСхемуЗапроса(СхемаЗапроса, Текст, Истина);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	ОписаниеПараметровЗапроса 	= Запрос.НайтиПараметры();	
	СписокОписанийВТ 			= Запросы_СписокОписанийВТИзТекстаЗапроса(Запрос.Текст);
	
	Итер = ЭтотОбъект.ПараметрыЗапроса.Количество()-1;
	
	ИндексыПараметрыЗапроса = Новый Массив();
	
	Пока Итер >= 0 Цикл
		Строка 	= ЭтотОбъект.ПараметрыЗапроса[Итер];
		ЭлементКоллекции = ОписаниеПараметровЗапроса.Найти(Строка.Имя);
		Если ЭлементКоллекции = Неопределено Тогда
			ИндексыПараметрыЗапроса.Добавить(Итер);
		КонецЕсли;
		Итер = Итер-1;
	КонецЦикла;
	
	Для Каждого Индекс Из ИндексыПараметрыЗапроса Цикл
		ЭтотОбъект.ПараметрыЗапроса.Удалить(Индекс);
	КонецЦикла;
	
	Итер = ЭтотОбъект.ВремТаблицы.Количество()-1;
	
	ИндексыВремТаблицы = Новый Массив();
	
	Пока Итер >= 0 Цикл
		Строка 	= ЭтотОбъект.ВремТаблицы[Итер];
		ЭлементКоллекции = СписокОписанийВТ.Получить(Строка.Имя);			
		Если ЭлементКоллекции = Неопределено Тогда
			ИндексыВремТаблицы.Добавить(Итер);
		КонецЕсли; 
		Итер = Итер-1;
	КонецЦикла;
	
	Для Каждого Индекс Из ИндексыВремТаблицы Цикл
		ЭтотОбъект.ВремТаблицы.Удалить(Индекс);
	КонецЦикла;
	
	Если ИндексыПараметрыЗапроса.Количество() > 0 Или ИндексыВремТаблицы.Количество() > 0 Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСхемуЗапросаНаСервере()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	ПроверитьСхемуЗапроса(СхемаЗапроса, Текст);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСхемуЗапроса(СхемаЗапроса, Знач Текст, Знач ВызовИсключения = Ложь)
	
	ТекДанные = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ЭтотОбъект.ТекущийИдентификатор);	
	ТекИсключение = ТекДанные.Исключение;
	
	Попытка     
		СхемаЗапроса = Новый СхемаЗапроса();			
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		ТекДанные.Исключение = Ложь;
		Если ТекИсключение <> ТекДанные.Исключение Тогда
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;		
	Исключение   
		СхемаЗапроса 		 = Неопределено;
		ТекДанные.Исключение = Истина;
		Если ТекИсключение <> ТекДанные.Исключение Тогда
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
		Если ВызовИсключения Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнструкциюНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МодульОбщегоНазначения = Неопределено;
	ЕстьФункцииРаботыВБезопасномРежиме = Ложь;
	
	Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		МодульОбщегоНазначения = Вычислить("ОбщегоНазначения");
		Попытка			
			МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме("Аргумент = Истина");
			ЕстьФункцииРаботыВБезопасномРежиме = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ТекстДокумент", Новый ТекстовыйДокумент());
	Если ЭтотОбъект.ФлагПеременнаяЗапрос Тогда
		ПараметрыВызова = КонсольЗапросов_ПараметрыВызова();
		Запрос = ОбъектОбработки.КонсольЗапросов_ЗапросИзОписания(ПараметрыВызова);
		Контекст.Вставить("Запрос", Запрос);
	КонецЕсли;
	
	Код = ЭтотОбъект.ПрограммныйКод.ПолучитьТекст();
	
	Если ЭтотОбъект.НастройкаТЖРаботаНастроена Тогда
		
		ЭтотОбъект.ТегЗапроса = Строка(Новый УникальныйИдентификатор());
		
		ТекстДок = Новый ТекстовыйДокумент();
		ТекстДок.УстановитьТекст(Код);
		ТекстДок.ВставитьСтроку(0, "ЗапросНачало = Новый Запрос(""ВЫБРАТЬ """"" + ЭтотОбъект.ТегЗапроса + "_begin" + """"" КАК query_tag""); ЗапросНачало.Выполнить();");
		ТекстДок.ДобавитьСтроку("ЗапросОкончание = Новый Запрос(""ВЫБРАТЬ """"" + ЭтотОбъект.ТегЗапроса + "_end" + """"" КАК query_tag""); ЗапросНачало.Выполнить();");
		Код = ТекстДок.ПолучитьТекст();
		
	КонецЕсли;
	
	ЭтотОбъект.ДатаВремяЗапроса = ТекущаяДата();
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
		МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме(Код, Контекст);
	Иначе
		ОбъектОбработки.ВыполнитьВБезопасномРежиме(Код, Контекст);
	КонецЕсли;
	
	ДатаОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЭтотОбъект.ВремяВыполнения = ДатаОкончания - ДатаНачала;
	
	ЭтотОбъект.ИнструкцияТекстовыйДокумент.УстановитьТекст(Контекст.ТекстДокумент.ПолучитьТекст());
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаКлиенте
Процедура ДлительнаяПроцедура_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.ДлительнаяОперация = Неопределено;

	Если Результат = Неопределено Тогда
		Сообщить("Неопределено");
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Сообщить(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		КонсольЗапросов_ПослеПолученияРезультата();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда)
	
	ЭтотОбъект.Команда = Команда;
	
	Если ЭтотОбъект.Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Форма_ВыполнитьКомандуСПроверкойНаСохранение_Завершение", ЭтотОбъект, Новый Структура()), "Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		Форма_ВыполнитьКоманду();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма_ВыполнитьКомандуСПроверкойНаСохранение_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КонсольЗапросов_СохранитьФайлНаКлиенте();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		Форма_ВыполнитьКоманду();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма_ВыполнитьКоманду()
	
	ТекКоманда = ЭтотОбъект.Команда;
	ЭтотОбъект.Команда = "";
	
	Если ТекКоманда = "НовыйФайл" Тогда
		
		КонсольЗапросов_НовыйФайл();
		
	ИначеЕсли ТекКоманда = "ОткрытьФайл" Тогда
				
		КонсольЗапросов_ОткрытьФайл();
		
	ИначеЕсли ТекКоманда = "СписокФайлов" Тогда
				
		КонсольЗапросов_СписокФайлов();		
				
	ИначеЕсли ТекКоманда = "ЗакрытьФорму" Тогда
		
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Форма_НовыйДиалогОткрытия()
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru = 'Файл запросов|*.bmqval;*.bmqxml'");
	Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Возврат Диалог;
	
КонецФункции

&НаКлиенте
Функция Форма_НовыйДиалогСохранения(Знач Наименование = "")
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = НСтр("ru = 'Файл запросов *.bmqval|*.bmqval|Файл запросов *.bmqxml|*.bmqxml'");
	
	Если ПустаяСтрока(Наименование) И Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
		Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);
		Диалог.ПолноеИмяФайла = Файл.ИмяБезРасширения;
		Диалог.ИндексФильтра  = ?(Файл.Расширение = ".bmqval", 0, 1);
	ИначеЕсли Не ПустаяСтрока(Наименование) Тогда
		Диалог.ПолноеИмяФайла = Наименование;
		Если Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
			Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);		
			Диалог.ИндексФильтра  = ?(Файл.Расширение = ".bmqval", 0, 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Диалог;
	
КонецФункции

&НаСервере
Функция Форма_ТаблицаЗначенийВоВременноеХранилище(Знач ИмяРеквизита)
	
	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[ИмяРеквизита].Выгрузить());
	
КонецФункции

&НаСервере
Функция Форма_ВременноеХранилищеВТаблицуЗначений(Знач ИмяРеквизита, Знач Адрес)
	
	ЭтотОбъект[ИмяРеквизита].Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	
КонецФункции

&НаСервере
Функция Форма_ПоместитьДанныеВоВременноеХранилищеФормы(Знач Адрес)
	
	Значение 	= ПолучитьИзВременногоХранилища(Адрес);
	Адрес		= ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура Форма_УстановитьДоступность(Доступность)
	
	СтруктураЭлементов = Новый Структура("ДеревоЗапросов,ГруппаТекстЗапросаКоманднаяПанель,ТекстЗапроса,ФормаНовыйФайл,ФормаГруппаОткрыть");
	Для Каждого КИЗ Из СтруктураЭлементов Цикл
		Элементы[КИЗ.Ключ].Доступность = Доступность;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуКонсольЗапросов(Знач АдресВХ)
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Истина;
	Имя = ВнешниеОбработки.Подключить(АдресВХ, "bm_КонсольЗапросов", Ложь, ОписаниеЗащиты);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ИмяФормыОбработки(Имя)
	
	ТипМетаданных = ?(СтрНачинаетсяС(ЭтотОбъект.ИмяФормы, "ВнешняяОбработка"), "ВнешняяОбработка", "Обработка");
	Возврат ТипМетаданных + ".bm_КонсольЗапросов.Форма." + Имя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УпрФормой(Знач Форма)
	
	Форма.Элементы.ГруппаЛогТЖ.Видимость = Форма.НастройкаТЖРаботаНастроена;
	
КонецФункции

#КонецОбласти

#Область КонсольЗапросов

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияСуществующийФайл()
	
	Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КонсольЗапросов_ИнициализацияСуществующийФайл_Завершение", ЭтотОбъект, Новый Структура()));
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияСуществующийФайл_Завершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов(ЭтотОбъект.ПолноеИмяФайла)
	Иначе
		ЭтотОбъект.ПолноеИмяФайла = "";
		КонсольЗапросов_ИнициализацияНовыйФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияНовыйФайл()
	
	НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
	НовСтр.ИдСтроки 		= Строка(Новый УникальныйИдентификатор());
	НовСтр.Наименование 	= "Новый запрос";
	
	ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_НовыйФайл()
	
	ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	
	ЭтотОбъект.ПолноеИмяФайла 	= "";
	ЭтотОбъект.ИмяФайла 		= "";
	
	НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
	НовСтр.ИдСтроки 		= Строка(Новый УникальныйИдентификатор());
	НовСтр.Наименование 	= "Новый запрос";
	
	ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;	
	ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса();	
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ОткрытьФайл()
	
	Диалог = Форма_НовыйДиалогОткрытия();	
	Оповещение = Новый ОписаниеОповещения("КонсольЗапросов_ОткрытьФайл_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ОткрытьФайл_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда					
			ПутьКФайлу = ВыбранныеФайлы[0];
			КонсольЗапросов_ПрочитатьФайлЗапросов(ПутьКФайлу);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлНаКлиенте(СохранитьКак = Ложь)
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	
	Если Не СохранитьКак И Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
		
		КонсольЗапросов_СохранитьФайлЗапросов(ЭтотОбъект.ПолноеИмяФайла);
		
		ЭтотОбъект.Модифицированность = Ложь;
		
		Форма_ВыполнитьКоманду();
		
	Иначе
		
		Диалог = Форма_НовыйДиалогСохранения();
		Оповещение = Новый ОписаниеОповещения("КонсольЗапросов_СохранитьФайлНаКлиенте_Завершение", ЭтотОбъект, Новый Структура());
		Диалог.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлНаКлиенте_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда
			ПутьКФайлу = ВыбранныеФайлы[0];
			КонсольЗапросов_СохранитьФайлЗапросов(ПутьКФайлу);			
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Ложь;	
	
	Форма_ВыполнитьКоманду();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СписокФайлов()
	
	АдресВоВременномХранилище 	= Форма_ТаблицаЗначенийВоВременноеХранилище("СписокФайлов");
	ПараметрыОткрытия 			= Новый Структура("АдресСписокФайлов", АдресВоВременномХранилище);
	Оповещение 					= Новый ОписаниеОповещения("КонсольЗапросов_СписокФайлов_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("СписокФайлов"), ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , , Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СписокФайлов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПутьКФайлу") Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов(Результат.ПутьКФайлу);
	ИначеЕсли Результат.Свойство("Очистить") Тогда
		ЭтотОбъект.СписокФайлов.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов(Знач ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Расширение = ".bmqval" Тогда		
		КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Файл.ПолноеИмя, Истина);
	ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Файл.ПолноеИмя, Истина);
	КонецЕсли;
	ЭтотОбъект.ПолноеИмяФайла = Файл.ПолноеИмя;
	ЭтотОбъект.ИмяФайла = Файл.Имя;
	КонсольЗапросов_ОбновитьСписокФайлов();
	
	ДФКЭД = ДеревоЗапросов.ПолучитьЭлементы();
	Если ДФКЭД.Количество() > 0 Тогда
		ЭтотОбъект.ТекущийИдентификатор = ДФКЭД[0].Идентификатор;
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Знач ПутьКФайлу, Знач Очищать = Истина)
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу);
	Значение = ЧтениеТекста.Прочитать();
	КонсольЗапросов_ЗагрузитьЗначение_bmqval(Значение, Очищать);
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Знач ПутьКФайлу, Знач Очищать = Истина)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонсольЗапросов_ЗагрузитьЗначение_bmqxml(СтрокаXML, Очищать);
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов(Знач ПутьКФайлу)

	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Расширение = ".bmqval" Тогда
		КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Файл.ПолноеИмя);
	ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
		КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Файл.ПолноеИмя);
	КонецЕсли;
	ЭтотОбъект.ПолноеИмяФайла = Файл.ПолноеИмя;
	ЭтотОбъект.ИмяФайла = Файл.Имя;
	КонсольЗапросов_ОбновитьСписокФайлов();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Знач ПутьКФайлу, Знач Идентификатор = Неопределено)
	
	Значение = КонсольЗапросов_ВыгрузитьЗначение_bmqval(Идентификатор);
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу);
	ЗаписьТекста.Записать(Значение);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Знач ПутьКФайлу, Знач Идентификатор = Неопределено)
	
	Значение = КонсольЗапросов_ВыгрузитьЗначение_bmqxml(Идентификатор);
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьБезОбработки(Значение);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ЗагрузитьЗначение_bmqval(Знач Значение, Знач Очищать = Истина)
	
	ЗначениеСохранения = ЗначениеИзСтрокиВнутр(Значение);
	Если Очищать Тогда
		ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ЗагрузитьЗначение_bmqxml(Знач СтрокаXML, Знач Очищать = Истина)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);	
	ЗначениеСохранения = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Если Очищать Тогда
		ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);
	
КонецПроцедуры

&НаСервере
Функция КонсольЗапросов_ВыгрузитьЗначение_bmqval(Знач Идентификатор = Неопределено)
	
	СохраняемыеДанные = ДеревоЗапросов_ДеревоЗначений(Идентификатор);
	Значение = ЗначениеВСтрокуВнутр(СохраняемыеДанные);
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ВыгрузитьЗначение_bmqxml(Знач Идентификатор = Неопределено)
	
	СохраняемыеДанные = ДеревоЗапросов_ДеревоЗначений(Идентификатор);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СохраняемыеДанные);
	
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции

&НаСервере
Процедура КонсольЗапросов_ЗагрузитьИзВХ(АдресВХ)

	ЗначениеСохранения = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ЗначениеСохранения = Неопределено Тогда
		ВызватьИсключение "Не удалось получить значение из ВХ";
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресВХ);
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);
	
КонецПроцедуры

&НаСервере
Функция КонсольЗапросов_ЗагрузитьИзРегистра(Знач КлючЗаписи)
	
	ЗначениеСохранения = РегистрыСведений.bm_Запросы.ЗначениеХранилища(КлючЗаписи);
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);	
	
КонецФункции

&НаКлиенте
Процедура КонсольЗапросов_ОбновитьСписокФайлов()
	
	МассивСтрок = ЭтотОбъект.СписокФайлов.НайтиСтроки(Новый Структура("ПутьКФайлу", ЭтотОбъект.ПолноеИмяФайла));
	Если МассивСтрок.Количество() > 0 Тогда
		ИскомаяСтрока = МассивСтрок[0];
		ЭтотОбъект.СписокФайлов.Удалить(ИскомаяСтрока);
	КонецЕсли;
	НовСтр = ЭтотОбъект.СписокФайлов.Вставить(0);
	НовСтр.ПутьКФайлу = ЭтотОбъект.ПолноеИмяФайла;
	
	Если ЭтотОбъект.СписокФайлов.Количество() > 10 Тогда
		ЭтотОбъект.СписокФайлов.Удалить(ЭтотОбъект.СписокФайлов.Количество()-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонсольЗапросов_СтрокаНастроек()
	
	Возврат "НастройкаМаксКоличествоСтрок,НастройкаВыводитьСвойстваВыборки,НастройкаВыделятьОтрицательные,
	|НастройкаФиксированнаяШиринаКолонок,НастройкаШиринаКолонок,НастройкаМаксШиринаКолонок,НастройкаПереноситьТекст,НастройкаФорматЧисла,НастройкаВыполнятьВФоне,НастройкаСохранятьРезультаты,
	|НастройкаРаботаСТЖ,НастройкаТЖПутьКФайлуКонфигурацииЛогов,НастройкаТЖКаталогЛогов,НастройкаТЖКаталогТекущихЛогов,НастройкаТЖТегЗапроса";
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ПроверитьТекстЗапроса(Знач Текст)
	
	Резт = Новый Структура("Результат, ТекстСообщения", Ложь, "");
	
	Попытка
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		Резт.Результат = Истина;
	Исключение
		Резт.Результат = Ложь;
		Резт.ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Резт;
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ПараметрыВызова(Знач ТекПараметрыВызова = Неопределено)
	
	ПараметрыВызова = Новый Структура("ТекстЗапроса, ВремТаблицы, ПараметрыЗапроса, ИспользуемыеЗапросы");
	ПараметрыВызова.ТекстЗапроса = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();	
	ПараметрыВызова.ВремТаблицы = ЭтотОбъект.ВремТаблицы.Выгрузить();
	ПараметрыВызова.ПараметрыЗапроса = ЭтотОбъект.ПараметрыЗапроса.Выгрузить();
	//ИспользуемыеЗапросы+
	ПараметрыВызова.ИспользуемыеЗапросы = ЭтотОбъект.ИспользуемыеЗапросы.Выгрузить();
	ПараметрыВызова.ИспользуемыеЗапросы.Колонки.Добавить("Значение", Новый ОписаниеТипов("Структура"));
	//ИспользуемыеЗапросы-
	
	//ИспользуемыеЗапросы+
	Для Каждого СтрокаТаблицы Из ПараметрыВызова.ИспользуемыеЗапросы Цикл
		Если СтрокаТаблицы.Использовать И Не ПустаяСтрока(СтрокаТаблицы.ИдСтроки) Тогда
			СтрокаТаблицы.Значение = КонсольЗапросов_ПараметрыВызоваИспользуемогоЗапроса(СтрокаТаблицы.ИдСтроки);
		КонецЕсли;
	КонецЦикла;
	//ИспользуемыеЗапросы-
	Для Каждого СтрокаТаблицы Из ПараметрыВызова.ВремТаблицы Цикл
		Если СтрокаТаблицы.ТипЗначения = "Таблица значений" И ЭтоАдресВременногоХранилища(СтрокаТаблицы.Значение) Тогда
			СтрокаТаблицы.Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение);
		КонецЕсли; 
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ПараметрыВызова.ПараметрыЗапроса Цикл
		Если СтрокаТаблицы.ТипЗначения = "Таблица значений" И ЭтоАдресВременногоХранилища(СтрокаТаблицы.Значение) Тогда
			СтрокаТаблицы.Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Если ТекПараметрыВызова <> Неопределено Тогда
		Для Каждого Элем Из ТекПараметрыВызова Цикл
			ПараметрыВызова.Вставить(Элем.Ключ, Элем.Значение);
		КонецЦикла;
		ПараметрыВызова.Вставить("НастройкиФормы", Новый Структура(КонсольЗапросов_СтрокаНастроек()));
		ЗаполнитьЗначенияСвойств(ПараметрыВызова.НастройкиФормы, ЭтотОбъект);
		ПараметрыВызова.Вставить("ФормироватьТабДок");                       
		Если ЭтотОбъект.НастройкаТЖРаботаНастроена Тогда
			ЭтотОбъект.ТегЗапроса = Строка(Новый УникальныйИдентификатор());
			ПараметрыВызова.Вставить("ТегЗапроса", ЭтотОбъект.ТегЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыВызова;
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ПараметрыВызоваИспользуемогоЗапроса(Знач ИдСтроки)
	
	ИскомаяСтрока = ДеревоЗапросов_НайтиПоРеквизиту(ЭтотОбъект, "ИдСтроки", ИдСтроки);
	Если ИскомаяСтрока = Неопределено Тогда
		ВызватьИсключение "Не найден используемый запрос с идентификатором " + ИдСтроки;
	КонецЕсли;
	
	СтруктураЗапроса = ПолучитьИзВременногоХранилища(ИскомаяСтрока.Адрес);
	
	ПараметрыВызова = Новый Структура("ТекстЗапроса, ВремТаблицы, ПараметрыЗапроса");
	ПараметрыВызова.ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса;	
	ПараметрыВызова.ВремТаблицы = СтруктураЗапроса.ВремТаблицы.Скопировать();
	ПараметрыВызова.ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ПараметрыВызова.ВремТаблицы Цикл
		Если СтрокаТаблицы.ТипЗначения = "Таблица значений" И ЭтоАдресВременногоХранилища(СтрокаТаблицы.Значение) Тогда
			СтрокаТаблицы.Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение);
		КонецЕсли; 
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ПараметрыВызова.ПараметрыЗапроса Цикл
		Если СтрокаТаблицы.ТипЗначения = "Таблица значений" И ЭтоАдресВременногоХранилища(СтрокаТаблицы.Значение) Тогда
			СтрокаТаблицы.Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ПараметрыВызова;
	
КонецФункции

&НаСервере
Процедура КонсольЗапросов_ПослеПолученияРезультата()
	
	КонсольЗапросов_СформироватьРезультат();
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_СформироватьРезультат()
	
	СтруктураРезультата = ПолучитьИзВременногоХранилища(ЭтотОбъект.РезультатВХранилище);
	
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.РезультатТабличныйДокумент.Вывести(СтруктураРезультата.ТабДок);
	ЭтотОбъект.РезультатТабличныйДокумент.ФиксацияСверху = СтруктураРезультата.Заголовки.Количество() + 1;
	
	ЭтотОбъект.КоличествоТаблиц = СтруктураРезультата.КоличествоТаблиц;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	
	ЭтотОбъект.РасчетЯчеекКоличество = 0;
	ЭтотОбъект.РасчетЯчеекСумма = 0;
	
	ЭтотОбъект.ДатаВремяЗапроса = СтруктураРезультата.ДатаВремяЗапроса;
	ЭтотОбъект.ВремяВыполнения = СтруктураРезультата.ВремяВыполнения;
	
КонецПроцедуры

&НаСервере
Функция КонсольЗапросов_ТекущийТабличныйДокумент(ПараметрыОбласти = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент();
	
	Если ПараметрыОбласти = Неопределено Тогда
		ТабДок.Вывести(ЭтотОбъект.РезультатТабличныйДокумент);
	Иначе
		ВыделеннаяОбласть = ЭтотОбъект.РезультатТабличныйДокумент.Область(ПараметрыОбласти.Верх, ПараметрыОбласти.Лево, ПараметрыОбласти.Низ, ПараметрыОбласти.Право);	
		ТабДок.ВставитьОбласть(ВыделеннаяОбласть, ТабДок.Область());		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура КонсольЗапросов_ПрочитатьКонфигурациюТЖ()
	
	Если ЭтотОбъект.ПеременныеОкружения.БезопасныйРежим Тогда
		Если ЭтотОбъект.НастройкаРаботаСТЖ Тогда
			ЭтотОбъект.НастройкаРаботаСТЖ = Ложь;
			ЭтотОбъект.НастройкаТЖПутьКФайлуКонфигурацииЛогов = "";
			ЭтотОбъект.НастройкаТЖКаталогЛогов = "";
			ЭтотОбъект.НастройкаТЖКаталогТекущихЛогов = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	НастройкиКонфигурацииЛогов = ОбъектОбработки.РаботаСТЖ_НастройкиКонфигурацииЛогов();
	ЭтотОбъект.НастройкаТЖПутьКФайлуКонфигурацииЛогов = НастройкиКонфигурацииЛогов.ПутьКФайлуКонфигурацииЛогов;
	ЭтотОбъект.НастройкаТЖКаталогЛогов = НастройкиКонфигурацииЛогов.КаталогЛогов;
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ПроверитьРаботуСТЖ()
	
	Если ЭтотОбъект.ПеременныеОкружения.БезопасныйРежим Тогда
		ЭтотОбъект.НастройкаТЖРаботаНастроена = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.НастройкаТЖРаботаНастроена = ЭтотОбъект.НастройкаРаботаСТЖ
		И Не ПустаяСтрока(ЭтотОбъект.НастройкаТЖКаталогТекущихЛогов)
		И ЭтотОбъект.НастройкаТЖТегЗапроса; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КонсольЗапросов_ОчиститьЛог(Знач Форма)
	
	Форма.ДатаВремяЗапроса = Неопределено;
	Если Форма.НастройкаТЖРаботаНастроена Тогда
		Форма.ТегЗапроса = "";
		Форма.HTMLДокументЛогТЖ = "";
		Форма.Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ПрочитатьЛог()
	
	Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = "";
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектОбработки.ЧтениеЛога_ПрочитатьЛог(ЭтотОбъект.ТегЗапроса, ЭтотОбъект.НастройкаТЖКаталогТекущихЛогов);
	
	Если ПустаяСтрока(Результат.НайденФайлЛогов) Тогда
		Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = "Не найден файл логов " + Результат.ПолноеИмяФайлаЛогов;
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.ЛогТекст) Тогда
		Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = "Не найден лог в файле " + Результат.ПолноеИмяФайлаЛогов;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.HTMLДокументЛогТЖ = Результат.ЛогHTML;
	Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = "Прочитан лог из файла " + Результат.ПолноеИмяФайлаЛогов;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки_ОбработчикОжидания()
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТекстЗапроса.Доступность = (ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор);
	Элементы.ГруппаТекстЗапросаКоманднаяПанель.Доступность = (ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДеревоЗапросов_НайтиПоИдентификатору(Знач Форма, Знач Идентификатор, Знач Дерево = Неопределено)
	
	Если Дерево = Неопределено Тогда
		Дерево = Форма.ДеревоЗапросов;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Идентификатор = Идентификатор Тогда
			Возврат Строка;
		КонецЕсли;
		ПодчДерево = Строка.ПолучитьЭлементы();
		Если ПодчДерево.Количество() > 0 Тогда
			ПодчСтрока = ДеревоЗапросов_НайтиПоИдентификатору(Форма, Идентификатор, Строка);
			Если ПодчСтрока <> Неопределено Тогда
				Возврат ПодчСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_НоваяСтрока(Знач Идентификатор, Знач ИдентификаторИсточника = Неопределено)
	
	ТекДанные = ЭтотОбъект.ДеревоЗапросов.НайтиПоИдентификатору(Идентификатор);
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	
	ТекДанные.Идентификатор 		= Идентификатор;
	ТекДанные.ИдСтроки 				= Строка(Новый УникальныйИдентификатор());
	ЭтотОбъект.ТекущийИдентификатор = Идентификатор;
	
	Если ИдентификаторИсточника = Неопределено Тогда
		ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса();
	Иначе
		СтрокаИсточника = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ИдентификаторИсточника);
		ТекДанные.Адрес = ДанныеЗапроса_СкопироватьДанныеЗапроса(СтрокаИсточника.Адрес);
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ТекДанные.Идентификатор);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросов_ВыбратьЗапрос()
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТекстЗапроса.Доступность = Истина;
	Элементы.ГруппаТекстЗапросаКоманднаяПанель.Доступность = Истина;
	
	ДеревоЗапросов_ВыбратьЗапросНаСервере(ТекДанные.Идентификатор);	
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ВыбратьЗапросНаСервере(Знач Идентификатор)
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	ЭтотОбъект.ТекущийИдентификатор = Идентификатор;	
	ДеревоЗапросов_ЗагрузитьДанныеСтроки(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ВыгрузитьДанныеСтроки(Знач Идентификатор)
	
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗапроса = ДеревоЗапросов_ВыгрузитьДанныеЗапроса();
	
	Строка.Адрес = ПоместитьВоВременноеХранилище(СтруктураЗапроса, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДанныеСтроки(Знач Идентификатор)
	
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
	
	СтруктураЗапроса = ПолучитьИзВременногоХранилища(Строка.Адрес);
	
	ДеревоЗапросов_ЗагрузитьДанныеЗапроса(СтруктураЗапроса);
	
КонецПроцедуры

&НаСервере
Функция ДеревоЗапросов_ВыгрузитьДанныеЗапроса()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("ТекстЗапроса", 		ЭтотОбъект.ТекстЗапроса.ПолучитьТекст());
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", 	ЭтотОбъект.ПараметрыЗапроса.Выгрузить());
	СтруктураЗапроса.Вставить("ВремТаблицы", 		ЭтотОбъект.ВремТаблицы.Выгрузить());
	СтруктураЗапроса.Вставить("ИспользуемыеЗапросы",ЭтотОбъект.ИспользуемыеЗапросы.Выгрузить());
	СтруктураЗапроса.Вставить("Инструкция", 		Новый Структура("ПрограммныйКод, ФлагПеременнаяЗапрос", ЭтотОбъект.ПрограммныйКод.ПолучитьТекст(), ЭтотОбъект.ФлагПеременнаяЗапрос));
	Если ЭтотОбъект.НастройкаСохранятьРезультаты Тогда
		Структ = Новый Структура();
		Структ.Вставить("РезультатТабличныйДокумент", Новый ХранилищеЗначения(ЭтотОбъект.РезультатТабличныйДокумент));
		Структ.Вставить("КоличествоТаблиц", ЭтотОбъект.КоличествоТаблиц);
		Структ.Вставить("ДатаВремяЗапроса", ЭтотОбъект.ДатаВремяЗапроса);
		Структ.Вставить("ВремяВыполнения", ЭтотОбъект.ВремяВыполнения);
		Структ.Вставить("ИнструкцияТекстовыйДокумент", ЭтотОбъект.ИнструкцияТекстовыйДокумент.ПолучитьТекст());
		Если ЭтотОбъект.НастройкаТЖРаботаНастроена Тогда
			Структ.Вставить("ТегЗапроса", ЭтотОбъект.ТегЗапроса);
			Структ.Вставить("HTMLДокументЛогТЖ", ЭтотОбъект.HTMLДокументЛогТЖ);
			Структ.Вставить("СтатусЧтенияЛога", Элементы.ДекорацияСтатусЧтенияЛога.Заголовок);
		КонецЕсли;
		СтруктураЗапроса.Вставить("СохраненныеДанные", Структ);
	КонецЕсли;
	Возврат СтруктураЗапроса;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДанныеЗапроса(Знач СтруктураЗапроса)
	
	ЭтотОбъект.ТекстЗапроса.УстановитьТекст(СтруктураЗапроса.ТекстЗапроса);
	ЭтотОбъект.ПараметрыЗапроса.Загрузить(СтруктураЗапроса.ПараметрыЗапроса);
	ЭтотОбъект.ВремТаблицы.Загрузить(СтруктураЗапроса.ВремТаблицы);
	Если СтруктураЗапроса.Свойство("ИспользуемыеЗапросы") Тогда //После обновления
		ЭтотОбъект.ИспользуемыеЗапросы.Загрузить(СтруктураЗапроса.ИспользуемыеЗапросы);
	Иначе
		ЭтотОбъект.ИспользуемыеЗапросы.Очистить();
	КонецЕсли;
	Если СтруктураЗапроса.Свойство("Инструкция") Тогда //После обновления
		ЭтотОбъект.ПрограммныйКод.УстановитьТекст(СтруктураЗапроса.Инструкция.ПрограммныйКод);
		ЭтотОбъект.ФлагПеременнаяЗапрос = СтруктураЗапроса.Инструкция.ФлагПеременнаяЗапрос;
	Иначе
		ЭтотОбъект.ПрограммныйКод.УстановитьТекст("");
		ЭтотОбъект.ФлагПеременнаяЗапрос = Ложь;
	КонецЕсли;
	ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	ЭтотОбъект.КоличествоМВТ = ЭтотОбъект.ИспользуемыеЗапросы.Количество();
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.КоличествоТаблиц = 0; 
	ЭтотОбъект.КоличествоИнструкция = ?(ПустаяСтрока(ЭтотОбъект.ПрограммныйКод.ПолучитьТекст()), 0, 1);
	ЭтотОбъект.ИнструкцияТекстовыйДокумент.Очистить();
	КонсольЗапросов_ОчиститьЛог(ЭтотОбъект);
	
	Если ЭтотОбъект.НастройкаСохранятьРезультаты И СтруктураЗапроса.Свойство("СохраненныеДанные") Тогда
		Структ = СтруктураЗапроса.СохраненныеДанные;
		ЭтотОбъект.РезультатТабличныйДокумент.Вывести(Структ.РезультатТабличныйДокумент.Получить());
		ЭтотОбъект.КоличествоТаблиц = Структ.КоличествоТаблиц;
		ЭтотОбъект.ДатаВремяЗапроса = Структ.ДатаВремяЗапроса;
		ЭтотОбъект.ВремяВыполнения = Структ.ВремяВыполнения; 
		ЭтотОбъект.ИнструкцияТекстовыйДокумент.УстановитьТекст(Структ.ИнструкцияТекстовыйДокумент);
		Если ЭтотОбъект.НастройкаТЖРаботаНастроена Тогда
			ЭтотОбъект.ТегЗапроса = Структ.ТегЗапроса;
			ЭтотОбъект.HTMLДокументЛогТЖ = Структ.HTMLДокументЛогТЖ;
			Элементы.ДекорацияСтатусЧтенияЛога.Заголовок = Структ.СтатусЧтенияЛога;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса()
	
	ЭтотОбъект.ТекстЗапроса.Очистить();
	ЭтотОбъект.ПараметрыЗапроса.Очистить();
	ЭтотОбъект.ВремТаблицы.Очистить();
	ЭтотОбъект.ИспользуемыеЗапросы.Очистить();
	ЭтотОбъект.КоличествоПараметровВТ = 0;
	ЭтотОбъект.КоличествоМВТ = 0;
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.КоличествоТаблиц = 0;
	ЭтотОбъект.ПрограммныйКод.Очистить();
	ЭтотОбъект.ИнструкцияТекстовыйДокумент.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ДеревоЗапросов_ДеревоЗначений(Знач Идентификатор = Неопределено)
	
	ДЗ = Новый ДеревоЗначений();        
	ДЗ.Колонки.Добавить("ИдСтроки");
	ДЗ.Колонки.Добавить("Наименование");
	ДЗ.Колонки.Добавить("Исключение");
	ДЗ.Колонки.Добавить("СтруктураЗапроса");
	
	Если Идентификатор = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ИскомаяСтрока = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
		ДФКЭД = Новый Массив(); 
		ДФКЭД.Добавить(ИскомаяСтрока);
	КонецЕсли;
	
	ДеревоЗапросов_ВыгрузитьДеревоЗапросов(ДЗ, ДФКЭД);
	
	Возврат ДЗ;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_ВыгрузитьДеревоЗапросов(ДЗ, Знач ДФКЭД)
	
	Для Каждого Строка Из ДФКЭД Цикл
		НовСтр = ДЗ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка, "ИдСтроки, Наименование, Исключение");
		НовСтр.Наименование = Строка.Наименование;
		НовСтр.СтруктураЗапроса = ДанныеЗапроса_КопияДанныхЗапроса(Строка.Адрес);
		ДанныеЗапроса_ВыгрузитьТаблицыЗначений(НовСтр.СтруктураЗапроса.ПараметрыЗапроса);
		ДанныеЗапроса_ВыгрузитьТаблицыЗначений(НовСтр.СтруктураЗапроса.ВремТаблицы);
		ПодчДФКЭД = Строка.ПолучитьЭлементы();
		Если ПодчДФКЭД.Количество() > 0 Тогда
			ДеревоЗапросов_ВыгрузитьДеревоЗапросов(НовСтр, ПодчДФКЭД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, Знач ДЗ, ДополнительныеПараметры = Неопределено)
	
	Если ТипЗнч(ДЗ) = Тип("ДеревоЗначений") Тогда
		ДополнительныеПараметры = Новый Структура("ЕстьИдСтроки");
		ДополнительныеПараметры.ЕстьИдСтроки = (ДЗ.Колонки.Найти("ИдСтроки") <> Неопределено);
	КонецЕсли;
	
	Для Каждого Строка Из ДЗ.Строки Цикл
		НовСтр = ДФКЭД.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка, "Наименование, Исключение");
		НовСтр.Идентификатор = НовСтр.ПолучитьИдентификатор();
		//После обновления+
		Если ДополнительныеПараметры.ЕстьИдСтроки Тогда
			НовСтр.ИдСтроки = Строка.ИдСтроки;
		Иначе
			НовСтр.ИдСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		//После обновления-
		ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Строка.СтруктураЗапроса.ПараметрыЗапроса);
		ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Строка.СтруктураЗапроса.ВремТаблицы);
		НовСтр.Адрес = ПоместитьВоВременноеХранилище(Строка.СтруктураЗапроса, ЭтотОбъект.УникальныйИдентификатор);
		//После обновления+
		ТЗ = Строка.СтруктураЗапроса.ПараметрыЗапроса;
		Если ТЗ.Колонки.Найти("ФлагСЗ") = Неопределено И ТЗ.Колонки.Найти("Расширение") <> Неопределено Тогда
			ТЗ.Колонки.Добавить("ФлагСЗ");
			ТЗ.Колонки.Добавить("ФлагГраница");
			ТЗ.Колонки.Добавить("ВидГраницы");
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				Если СтрокаТЗ.Расширение = "Список значений" Тогда
					СтрокаТЗ.ФлагСЗ = Истина;
				ИначеЕсли Найти(СтрокаТЗ.Расширение, "Дата") > 0 Или Найти(СтрокаТЗ.Расширение, "Момент") > 0 Тогда
					СтрокаТЗ.ФлагГраница = Истина;
					СтрокаТЗ.ВидГраницы = СтрокаТЗ.Расширение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//После обновления-
		Если Строка.Строки.Количество() > 0 Тогда
			ПодчДФКЭД = НовСтр.ПолучитьЭлементы();
			ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ПодчДФКЭД, Строка, ДополнительныеПараметры);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДеревоЗапросов_НайтиПоРеквизиту(Знач Форма, Знач ИмяРеквизита, Знач Значение, Знач Дерево = Неопределено)
	
	Если Дерево = Неопределено Тогда
		Дерево = Форма.ДеревоЗапросов;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка[ИмяРеквизита] = Значение Тогда
			Возврат Строка;
		КонецЕсли;
		ПодчДерево = Строка.ПолучитьЭлементы();
		Если ПодчДерево.Количество() > 0 Тогда
			ПодчСтрока = ДеревоЗапросов_НайтиПоРеквизиту(Форма, ИмяРеквизита, Значение, Строка);
			Если ПодчСтрока <> Неопределено Тогда
				Возврат ПодчСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ДеревоЗапросов_ПоместитьВХДеревоВыбораЗапроса()
	
	ДЗ = РеквизитФормыВЗначение("ДеревоЗапросов");
	МассивКолонок = СтрРазделить("ИдСтроки,Наименование", ",");
	
	Для Каждого ИмяКолонки Из МассивКолонок Цикл
		Если ДЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДЗ.Колонки.Удалить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	АдресВХ = ПоместитьВоВременноеХранилище(ДЗ);
	
	Возврат АдресВХ;
	
КонецФункции

#КонецОбласти

#Область ДанныеЗапроса

&НаСервере
Процедура ДанныеЗапроса_ВыгрузитьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(Строка.Значение) Тогда
			Строка.Значение = ПолучитьИзВременногоХранилища(Строка.Значение);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И ТипЗнч(Строка.Значение) = Тип("ТаблицаЗначений") Тогда
			Строка.Значение = ПоместитьВоВременноеХранилище(Строка.Значение, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ДанныеЗапроса_СкопироватьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(Строка.Значение) Тогда
			ТЗ = ПолучитьИзВременногоХранилища(Строка.Значение);
			Строка.Значение = ПоместитьВоВременноеХранилище(ТЗ.Скопировать(), УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ДанныеЗапроса_СкопироватьДанныеЗапроса(Знач АдресИсточник)
	
	Источник = ПолучитьИзВременногоХранилища(АдресИсточник);
	Приемник = Новый Структура();
	Приемник.Вставить("ТекстЗапроса", 		Источник.ТекстЗапроса);
	Приемник.Вставить("ПараметрыЗапроса", 	Источник.ПараметрыЗапроса.Скопировать());
	Приемник.Вставить("ВремТаблицы", 		Источник.ВремТаблицы.Скопировать());
	ДанныеЗапроса_СкопироватьТаблицыЗначений(Источник.ПараметрыЗапроса);
	ДанныеЗапроса_СкопироватьТаблицыЗначений(Источник.ВремТаблицы);
	АдресПриемник  = ПоместитьВоВременноеХранилище(Приемник, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресПриемник; 
	
КонецФункции

&НаСервере
Функция ДанныеЗапроса_КопияДанныхЗапроса(Знач АдресИсточник)
	
	Источник = ПолучитьИзВременногоХранилища(АдресИсточник);
	Приемник = Новый Структура();
	Приемник.Вставить("ТекстЗапроса", 		Источник.ТекстЗапроса);
	Приемник.Вставить("ПараметрыЗапроса", 	Источник.ПараметрыЗапроса.Скопировать());
	Приемник.Вставить("ВремТаблицы", 		Источник.ВремТаблицы.Скопировать());
	Если Источник.Свойство("ИспользуемыеЗапросы") Тогда //После обновления
		Приемник.Вставить("ИспользуемыеЗапросы", Источник.ИспользуемыеЗапросы.Скопировать());
	КонецЕсли;
	Если Источник.Свойство("Инструкция") Тогда //После обновления
		Приемник.Вставить("Инструкция", Источник.Инструкция);
	КонецЕсли;
	
	Возврат Приемник; 
	
КонецФункции

#КонецОбласти

#Область Запросы

&НаСервереБезКонтекста
Функция Запросы_СписокОписанийВТИзТекстаЗапроса(Знач ТекстЗапроса)
	
	Результат = Новый Соответствие();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ЭлементКоллекции Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(ЭлементКоллекции, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(Запрос, Результат)
	
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
			Источник = ИсточникСхемыЗапроса.Источник;
			Если ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				ТЗ = Результат.Получить(Источник.ИмяТаблицы);
				Если ТЗ = Неопределено Тогда
					ТЗ = Новый ТаблицаЗначений();
					Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник);
					Результат.Вставить(Источник.ИмяТаблицы, ТЗ);
				Иначе
					Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(Источник.Запрос, Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник)
	
	Для Каждого ЭлементКоллекции Из Источник.ДоступныеПоля Цикл
		Имя = ЭлементКоллекции.Имя; 
		МассивСтрок = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если МассивСтрок.Количество() > 0 Тогда
			Имя = МассивСтрок[0];
		КонецЕсли;
		Если ТЗ.Колонки.Найти(Имя) = Неопределено Тогда
			ТЗ.Колонки.Добавить(Имя, ЭлементКоллекции.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область ТипыЗначений

&НаКлиенте
Процедура ТипыЗначений_УстановитьОграничениеТипа(Элемент, ТекДанные)
	
	Если ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент") > 0
		Или ТипЗнч(ТекДанные.ТипЗначения) = Тип("ОписаниеТипов") И ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
		Элемент.ОграничениеТипа = ЭтотОбъект.ОписаниеТиповДокумент;
	ИначеЕсли ТекДанные.ТипЗначения = "Таблица значений" Тогда
		Элемент.ОграничениеТипа = ЭтотОбъект.ОписаниеТиповСтрока;
	ИначеЕсли ТекДанные.ФлагСЗ Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
	Иначе
		Элемент.ОграничениеТипа = ТекДанные.ТипЗначения;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные)
	
	Если ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент") > 0
		Или ТипЗнч(ТекДанные.ТипЗначения) = Тип("ОписаниеТипов") И ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповДокумент.ПривестиЗначение(ТекДанные.Значение);
	ИначеЕсли ТекДанные.ТипЗначения = "Таблица значений" Тогда
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповСтрока.ПривестиЗначение(ТекДанные.Значение);
	Иначе
		ТекДанные.Значение = ТекДанные.ТипЗначения.ПривестиЗначение(ТекДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоФункций

&НаСервере
Процедура ДеревоФункций_Заполнить()
	
	Обт = РеквизитФормыВЗначение("Объект");
	КоллекцияМетаданных = Обт.КоллекцияМетаданных();
	
	Для Каждого СтрокаТЗ Из КоллекцияМетаданных Цикл
		
		Если СтрокаТЗ.ИмяЕдч = "Отчет"
			Или СтрокаТЗ.ИмяЕдч = "Обработка" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ.ИмяЕдч = "ВнешнийИсточникДанных" Тогда
			Продолжить;
		КонецЕсли;
				
		Если Не ПустаяСтрока(СтрокаТЗ.Картинка) Тогда
			Картинка = БиблиотекаКартинок[СтрокаТЗ.Картинка];
		Иначе
			Картинка = Новый Картинка();
		КонецЕсли;
		
		НовСтр0 = ЭтотОбъект.ДеревоФункций.ПолучитьЭлементы().Добавить();
		НовСтр0.ИмяМнч 	= СтрокаТЗ.ИмяМнч;
		НовСтр0.ИмяЕдч 	= СтрокаТЗ.ИмяЕдч;
		НовСтр0.Имя 	= СтрокаТЗ.ИмяЕдч;
		НовСтр0.Картинка= Картинка;
		
		Для Каждого ОМ Из Метаданные[СтрокаТЗ.ИмяМнч] Цикл
			
			НовСтр1 = НовСтр0.ПолучитьЭлементы().Добавить();
			НовСтр1.ИмяМнч = СтрокаТЗ.ИмяМнч;
			НовСтр1.ИмяЕдч = СтрокаТЗ.ИмяЕдч;		
			НовСтр1.Имя 		= ОМ.Имя;
			НовСтр1.Синоним 	= ОМ.Синоним;
			НовСтр1.Картинка 	= Картинка;
			
		КонецЦикла;
		
		ДеревоФункций_СортироватьУзелДерева(НовСтр0);
		
	КонецЦикла;
	
	ДеревоФункций_ЗаполнитьВнешниеИсточникиДанных();
	
КонецПроцедуры

&НаСервере
Процедура ДеревоФункций_ЗаполнитьВнешниеИсточникиДанных()
	
	Список = Новый СписокЗначений();
	Для Каждого ОМ Из Метаданные.ВнешниеИсточникиДанных Цикл
		Список.Добавить(ОМ.Имя);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Картинка = БиблиотекаКартинок.ВнешнийИсточникДанных;
	
	НовСтр0 = ЭтотОбъект.ДеревоФункций.ПолучитьЭлементы().Добавить();
	НовСтр0.ИмяМнч 	= "ВнешниеИсточникиДанных";
	НовСтр0.ИмяЕдч 	= "ВнешнийИсточникДанных";
	НовСтр0.Имя 	= "ВнешниеИсточникиДанных";
	НовСтр0.Картинка= Картинка;
		
	Для Каждого Элем Из Список Цикл
	
		ОМ = Метаданные.ВнешниеИсточникиДанных[Элем.Значение];
		НовСтр1 = НовСтр0.ПолучитьЭлементы().Добавить();
		НовСтр1.ИмяМнч = "ВнешниеИсточникиДанных." + ОМ.Имя;
		НовСтр1.ИмяЕдч = "ВнешнийИсточникДанных." + ОМ.Имя;		
		НовСтр1.Имя 		= ОМ.Имя;
		НовСтр1.Синоним 	= ОМ.Синоним;
		НовСтр1.Картинка 	= Картинка;
		
		Ветка = НовСтр1.ПолучитьЭлементы().Добавить();
		Ветка.ИмяМнч 		= "ВнешниеИсточникиДанных." + ОМ.Имя + ".Таблицы";
		Ветка.ИмяЕдч 		= "ВнешнийИсточникДанных." + ОМ.Имя + ".Таблица";
		Ветка.Имя 			= "Таблицы";
		Ветка.Синоним 		= "Таблицы";
		Ветка.Картинка 		= БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		
		ПодСписок = Новый СписокЗначений();
		Для Каждого ПодЭлемОМ Из Метаданные.ВнешниеИсточникиДанных[ОМ.Имя].Таблицы Цикл
			ПодСписок.Добавить(ПодЭлемОМ.Имя);
		КонецЦикла;
		ПодСписок.СортироватьПоЗначению();
		
		Для Каждого ПодЭлем Из ПодСписок Цикл
			ЭлемОМ = Метаданные.ВнешниеИсточникиДанных[ОМ.Имя].Таблицы[ПодЭлем.Значение];
			НовСтр = Ветка.ПолучитьЭлементы().Добавить();	
			НовСтр.ИмяМнч 		= "ВнешниеИсточникиДанных." + ОМ.Имя + ".Таблицы";
			НовСтр.ИмяЕдч 		= "ВнешнийИсточникДанных." + ОМ.Имя + ".Таблица";
			НовСтр.Имя 			= ЭлемОМ.Имя;
			НовСтр.Синоним 		= ЭлемОМ.Синоним;
			НовСтр.Картинка 	= БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		КонецЦикла;
		
		Ветка = НовСтр1.ПолучитьЭлементы().Добавить();
		Ветка.ИмяМнч 		= "ВнешниеИсточникиДанных." + ОМ.Имя + ".Кубы";
		Ветка.ИмяЕдч 		= "ВнешнийИсточникДанных." + ОМ.Имя + ".Куб";
		Ветка.Имя 			= "Кубы";
		Ветка.Синоним 		= "Кубы";
		Ветка.Картинка 		= БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
		
		ПодСписок = Новый СписокЗначений();
		Для Каждого ПодЭлемОМ Из Метаданные.ВнешниеИсточникиДанных[ОМ.Имя].Кубы Цикл
			ПодСписок.Добавить(ПодЭлемОМ.Имя);
		КонецЦикла;
		ПодСписок.СортироватьПоЗначению();
		
		Для Каждого ПодЭлем Из ПодСписок Цикл
			ЭлемОМ = Метаданные.ВнешниеИсточникиДанных[ОМ.Имя].Кубы[ПодЭлем.Значение];
			НовСтр = Ветка.ПолучитьЭлементы().Добавить();	
			НовСтр.ИмяМнч 		= "ВнешниеИсточникиДанных." + ОМ.Имя + ".Кубы";
			НовСтр.ИмяЕдч 		= "ВнешнийИсточникДанных." + ОМ.Имя + ".Куб";
			НовСтр.Имя 			= ЭлемОМ.Имя;
			НовСтр.Синоним 		= ЭлемОМ.Синоним;
			НовСтр.Картинка 	= БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДеревоФункций_СортироватьУзелДерева(УзелДерева)
	
	Список = Новый СписокЗначений();
	Соот = Новый Соответствие();
	
	Для Каждого СтрокаДерева Из УзелДерева.ПолучитьЭлементы() Цикл
		Список.Добавить(СтрокаДерева.Имя);
		Структ = Новый Структура("ИмяМнч,ИмяЕдч,Имя,Синоним,Картинка");
		ЗаполнитьЗначенияСвойств(Структ, СтрокаДерева);
		Соот.Вставить(СтрокаДерева.Имя, Структ);
	КонецЦикла;
	
	УзелДерева.ПолучитьЭлементы().Очистить();
	Список.СортироватьПоЗначению();
	
	Для Каждого Элем Из Список Цикл
		СтрокаДерева = УзелДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Соот.Получить(Элем.Значение));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


















